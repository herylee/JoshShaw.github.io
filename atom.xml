<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Joshua Shaw之秘密花园</title>
  <subtitle>成就自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://joshshaw.github.io/"/>
  <updated>2016-05-12T12:25:26.185Z</updated>
  <id>http://joshshaw.github.io/</id>
  
  <author>
    <name>Joshua Shaw</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的vim</title>
    <link href="http://joshshaw.github.io/2016/05/12/%E6%88%91%E7%9A%84vim/"/>
    <id>http://joshshaw.github.io/2016/05/12/我的vim/</id>
    <published>2016-05-12T09:11:43.000Z</published>
    <updated>2016-05-12T12:25:26.185Z</updated>
    
    <content type="html">&lt;h1 id=&quot;光标移动&quot;&gt;&lt;a href=&quot;#光标移动&quot; class=&quot;headerlink&quot; title=&quot;光标移动&quot;&gt;&lt;/a&gt;光标移动&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;操作&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;h&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;左移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;j&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;右移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;k&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;上移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;l&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;右移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;[Ctrl]+f&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;上移一页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;[Ctrl]+b&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;下移一页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;[Ctrl]+d&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;上移半页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;[Ctrl]+u&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;下移半页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0, [HOME]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;一行的最前页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;$, [END]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;一行的最后页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;H&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;移动到该页的第一行第一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;M&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;移动到该页的中间行第一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;L&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;移动到该页的最后行第一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;G&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;移动到文件最后一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;nG&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;移动到第n行（1G移动到文件头）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;gg&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;等同1G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;n[Enter]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;光标向下移动n行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;字符串的查找与替换&quot;&gt;&lt;a href=&quot;#字符串的查找与替换&quot; class=&quot;headerlink&quot; title=&quot;字符串的查找与替换&quot;&gt;&lt;/a&gt;字符串的查找与替换&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;操作&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;/word&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;向下寻找word字符串（?word为向上）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;n&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;重复前一个操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;反方向重复前一个操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;:n1, n2s/word1/word2/g(c)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;从第n1行到第n2行查找word1并换成word2，+c的话需要用户确认每次替换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1, $&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;上一行的n1和n2，全文的查找和替换&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;复制、撤销、重复&quot;&gt;&lt;a href=&quot;#复制、撤销、重复&quot; class=&quot;headerlink&quot; title=&quot;复制、撤销、重复&quot;&gt;&lt;/a&gt;复制、撤销、重复&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;操作&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;v&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;光标选定模式，配合上下左右选定段，再按y复制，或按d删除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;[Ctrl]+v&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;快选择，可以用长方形的方式选择数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;yy&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;复制当前行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;p, P&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将已经复制的数据在光标下一行粘贴，大写P为上一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;u&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;复原前一操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;[Ctrl]+r&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;重做上一操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;nyy&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;复制光标（包括光标行）向下n行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;我的-vimrc配置&quot;&gt;&lt;a href=&quot;#我的-vimrc配置&quot; class=&quot;headerlink&quot; title=&quot;我的.vimrc配置&quot;&gt;&lt;/a&gt;我的&lt;code&gt;.vimrc&lt;/code&gt;配置&lt;/h1&gt;&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;number&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;&quot;显示行号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; nowrap           &lt;span class=&quot;comment&quot;&gt;&quot;不换行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;shiftwidth&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;&quot;默认缩进4个空格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; softtabstop=&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;&quot;使用tab时 tab空格数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; tabstop=&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;        &lt;span class=&quot;comment&quot;&gt;&quot;tab代表4个空格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; laststatus=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;&quot;总是显示状态行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;comment&quot;&gt;&quot; indent 删除自动缩进的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;comment&quot;&gt;&quot; eol 删除上一行行末尾的回车，两行合并&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;comment&quot;&gt;&quot; start 除了刚输入的，还删除原来的字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; backspace=&lt;span class=&quot;built_in&quot;&gt;indent&lt;/span&gt;,eol,start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; expandtab       &lt;span class=&quot;comment&quot;&gt;&quot;使用空格替换tab&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; autoindent      &lt;span class=&quot;comment&quot;&gt;&quot; 自动缩进&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;colorscheme&lt;/span&gt; evening &lt;span class=&quot;comment&quot;&gt;&quot;颜色模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;syn &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;              &lt;span class=&quot;comment&quot;&gt;&quot;语法高亮&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;filetype&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;         &lt;span class=&quot;comment&quot;&gt;&quot;文件类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; encoding=utf-&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;&quot;编码为utf8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;光标移动&quot;&gt;&lt;a href=&quot;#光标移动&quot; class=&quot;headerlink&quot; title=&quot;光标移动&quot;&gt;&lt;/a&gt;光标移动&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;操作&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;h&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;左移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;j&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;右移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;k&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;上移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;l&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;右移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;[Ctrl]+f&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;上移一页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;[Ctrl]+b&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;下移一页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;[Ctrl]+d&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;上移半页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;[Ctrl]+u&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;下移半页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0, [HOME]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;一行的最前页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;$, [END]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;一行的最后页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;H&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;移动到该页的第一行第一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;M&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;移动到该页的中间行第一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;L&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;移动到该页的最后行第一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;G&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;移动到文件最后一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;nG&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;移动到第n行（1G移动到文件头）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;gg&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;等同1G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;n[Enter]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;光标向下移动n行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="偏好配置" scheme="http://joshshaw.github.io/tags/%E5%81%8F%E5%A5%BD%E9%85%8D%E7%BD%AE/"/>
    
      <category term="vim" scheme="http://joshshaw.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>RAID</title>
    <link href="http://joshshaw.github.io/2016/05/09/RAID/"/>
    <id>http://joshshaw.github.io/2016/05/09/RAID/</id>
    <published>2016-05-09T06:55:06.000Z</published>
    <updated>2016-05-09T06:55:06.437Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL主从库复制配置入门</title>
    <link href="http://joshshaw.github.io/2016/05/06/MySQL%E4%B8%BB%E4%BB%8E%E5%BA%93%E5%A4%8D%E5%88%B6%E9%85%8D%E7%BD%AE/"/>
    <id>http://joshshaw.github.io/2016/05/06/MySQL主从库复制配置/</id>
    <published>2016-05-06T06:17:12.000Z</published>
    <updated>2016-05-06T07:01:08.234Z</updated>
    
    <content type="html">&lt;h2 id=&quot;创建复制账号&quot;&gt;&lt;a href=&quot;#创建复制账号&quot; class=&quot;headerlink&quot; title=&quot;创建复制账号&quot;&gt;&lt;/a&gt;创建复制账号&lt;/h2&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql &amp;gt; grant replication slave, replication client on *.*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          to &#39;repl&#39;@&#39;172.18.%&#39; identified by &#39;password&#39;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;在主备库都创建该账号，把账户限制在本地网络。&lt;/li&gt;
&lt;li&gt;为了方便才以后能交换主备库的角色。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;配置主库和备库&quot;&gt;&lt;a href=&quot;#配置主库和备库&quot; class=&quot;headerlink&quot; title=&quot;配置主库和备库&quot;&gt;&lt;/a&gt;配置主库和备库&lt;/h2&gt;&lt;h3 id=&quot;主库&quot;&gt;&lt;a href=&quot;#主库&quot; class=&quot;headerlink&quot; title=&quot;主库&quot;&gt;&lt;/a&gt;主库&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;my.cnf&lt;/code&gt;中增加（修改）：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;log_bin    = mysql-bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server_id  = 10         # 千万不要设置为1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以通过下面指令查看复制log文件和log位置：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql &amp;gt; show master status\G;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;备库&quot;&gt;&lt;a href=&quot;#备库&quot; class=&quot;headerlink&quot; title=&quot;备库&quot;&gt;&lt;/a&gt;备库&lt;/h3&gt;&lt;p&gt;同样在&lt;code&gt;my.cnf&lt;/code&gt;中增加（修改）：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;log_bin           = mysql-bin                        # 和主库一致&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server_id         = 2                                # 要和主库不一样&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;relay_log         = /var/lib/mysql/mysql-relay-bin   # 配置为绝对路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log_slave_updates = 1                                # 不开启会出问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;read_only         = 1                                # repl账户只能读&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;重启与启动复制&quot;&gt;&lt;a href=&quot;#重启与启动复制&quot; class=&quot;headerlink&quot; title=&quot;重启与启动复制&quot;&gt;&lt;/a&gt;重启与启动复制&lt;/h3&gt;&lt;p&gt;上述配置完需要重启mysql。&lt;br&gt;启动复制前要让备库知道主库的信息，以便获取和重放其二进制日志。&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql &amp;gt; change master to master_host=&#39;ip&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        master_user=&#39;repl&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        master_password=&#39;password&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        master_log_file=&#39;mysql-bin.000001&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        master_log_pos=0;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;启动slave：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql &amp;gt; start slave;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看slave的状态查看&lt;code&gt;slave_IO_Running&lt;/code&gt;、&lt;code&gt;Slave_SQL_Running&lt;/code&gt;等情况：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql &amp;gt; show slave status\G&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;错误分析&quot;&gt;&lt;a href=&quot;#错误分析&quot; class=&quot;headerlink&quot; title=&quot;错误分析&quot;&gt;&lt;/a&gt;错误分析&lt;/h2&gt;&lt;h3 id=&quot;从库不能重放行为&quot;&gt;&lt;a href=&quot;#从库不能重放行为&quot; class=&quot;headerlink&quot; title=&quot;从库不能重放行为&quot;&gt;&lt;/a&gt;从库不能重放行为&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;开启复制后才会重放主库的所有行为，因为此时的行为才会被记录到复制日志中，所以开启复制后的创建数据库、&lt;br&gt;建表操作，CRUD操作才能在从库重放。&lt;/li&gt;
&lt;li&gt;而配置复制前在主库建立的数据库，由于没有记录日志，所以从库没有该数据库，也没有该表，虽然记录了CRUD&lt;br&gt;在日志里，但是不能重放。解决办法是手动建库建表。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;日志文件和位置错乱&quot;&gt;&lt;a href=&quot;#日志文件和位置错乱&quot; class=&quot;headerlink&quot; title=&quot;日志文件和位置错乱&quot;&gt;&lt;/a&gt;日志文件和位置错乱&lt;/h3&gt;&lt;p&gt;有时候日志文件和位置错乱时，就要通过查看主库的master状态来更新备库的信息。更新信息前要&lt;code&gt;stop slave&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql &amp;gt; change master to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        master_log_file=&#39;mysql-bin.000002&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        master_log_pos=1234;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;推荐配置&quot;&gt;&lt;a href=&quot;#推荐配置&quot; class=&quot;headerlink&quot; title=&quot;推荐配置&quot;&gt;&lt;/a&gt;推荐配置&lt;/h2&gt;&lt;p&gt;上述的配置外，在数据完整性的重要性高于性能时，在主库配置&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sync_binlog = 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;MySQL每次在提交事务前会将二进制日志同步到磁盘上，能保证服务器崩溃时不会丢失事件。&lt;br&gt;而在备库中，如果使用的是MySQL5.5版本，并且不介意额外的fsync()导致的性能开销，最好配置：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sync_master_info    = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sync_relay_log      = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sync_relay_log_info = 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;以上的配置为数据库还没有数据时的配置，若主库在配置复制前已经有数据了，有一些其他的配置可供使用，这里先不详述。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建复制账号&quot;&gt;&lt;a href=&quot;#创建复制账号&quot; class=&quot;headerlink&quot; title=&quot;创建复制账号&quot;&gt;&lt;/a&gt;创建复制账号&lt;/h2&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql &amp;gt; grant replication slave, replication client on *.*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          to &#39;repl&#39;@&#39;172.18.%&#39; identified by &#39;password&#39;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;在主备库都创建该账号，把账户限制在本地网络。&lt;/li&gt;
&lt;li&gt;为了方便才以后能交换主备库的角色。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;配置主库和备库&quot;&gt;&lt;a href=&quot;#配置主库和备库&quot; class=&quot;headerlink&quot; title=&quot;配置主库和备库&quot;&gt;&lt;/a&gt;配置主库和备库&lt;/h2&gt;&lt;h3 id=&quot;主库&quot;&gt;&lt;a href=&quot;#主库&quot; class=&quot;headerlink&quot; title=&quot;主库&quot;&gt;&lt;/a&gt;主库&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;my.cnf&lt;/code&gt;中增加（修改）：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;log_bin    = mysql-bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server_id  = 10         # 千万不要设置为1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以通过下面指令查看复制log文件和log位置：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql &amp;gt; show master status\G;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;备库&quot;&gt;&lt;a href=&quot;#备库&quot; class=&quot;headerlink&quot; title=&quot;备库&quot;&gt;&lt;/a&gt;备库&lt;/h3&gt;&lt;p&gt;同样在&lt;code&gt;my.cnf&lt;/code&gt;中增加（修改）：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;log_bin           = mysql-bin                        # 和主库一致&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server_id         = 2                                # 要和主库不一样&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;relay_log         = /var/lib/mysql/mysql-relay-bin   # 配置为绝对路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log_slave_updates = 1                                # 不开启会出问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;read_only         = 1                                # repl账户只能读&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="配置笔记" scheme="http://joshshaw.github.io/categories/%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="配置" scheme="http://joshshaw.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>《高性能MySQL》指南摘要</title>
    <link href="http://joshshaw.github.io/2016/05/04/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B%E6%8C%87%E5%8D%97%E6%91%98%E8%A6%81/"/>
    <id>http://joshshaw.github.io/2016/05/04/《高性能MySQL》指南摘要/</id>
    <published>2016-05-04T08:19:15.000Z</published>
    <updated>2016-05-04T08:20:09.716Z</updated>
    
    <content type="html">&lt;p&gt;《高性能MySQL》一书给我们做了许多指导，其中有5章应该精读的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://joshshaw.github.io/2016/04/28/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B%E3%81%AESchema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96/&quot;&gt;Schema与数据类型优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://joshshaw.github.io/2016/04/29/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B%E3%81%AE%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95/&quot;&gt;创建高性能的索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://joshshaw.github.io/2016/05/04/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B%E3%81%AE%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/&quot;&gt;查询性能优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://joshshaw.github.io/2016/04/22/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B%E3%81%AEMySQL%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/&quot;&gt;MySQL高级特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://joshshaw.github.io/2016/04/26/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B%E3%81%AE%E5%A4%8D%E5%88%B6/&quot;&gt;复制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我对这几章都读过不下三遍了，有一些理解，当然更多的是疑惑，顺便在阅读的时候做了一些关键的摘要，方便以后查阅，当然在这里也共享给大家阅读一下。&lt;/p&gt;
&lt;p&gt;可能我的总结有纰漏，请大家评判指正，谢谢。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;《高性能MySQL》一书给我们做了许多指导，其中有5章应该精读的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://joshshaw.github.io/2016/04/28/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3
    
    </summary>
    
      <category term="汇总" scheme="http://joshshaw.github.io/categories/%E6%B1%87%E6%80%BB/"/>
    
    
      <category term="MySQL" scheme="http://joshshaw.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>《高性能MySQL》の查询性能优化</title>
    <link href="http://joshshaw.github.io/2016/05/04/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B%E3%81%AE%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://joshshaw.github.io/2016/05/04/《高性能MySQL》の查询性能优化/</id>
    <published>2016-05-04T07:07:23.000Z</published>
    <updated>2016-05-04T08:08:49.830Z</updated>
    
    <content type="html">&lt;h2 id=&quot;0x00前言&quot;&gt;&lt;a href=&quot;#0x00前言&quot; class=&quot;headerlink&quot; title=&quot;0x00前言&quot;&gt;&lt;/a&gt;0x00前言&lt;/h2&gt;&lt;p&gt;本书讲述到定稿前的MySQL5.5版，所以下面内容的适用范围止步于MySQL5.5。本文仅仅强调书中讲述的重中之重，&lt;br&gt;以便快速查阅，详细的内容还请认真阅读书本和MySQL的官方文档。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x01-为什么查询速度会慢&quot;&gt;&lt;a href=&quot;#0x01-为什么查询速度会慢&quot; class=&quot;headerlink&quot; title=&quot;0x01 为什么查询速度会慢&quot;&gt;&lt;/a&gt;0x01 为什么查询速度会慢&lt;/h2&gt;&lt;p&gt;查询性能低下的最基本的原因是访问的数据太多。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询不需要的记录。使用LIMIT来限制。&lt;/li&gt;
&lt;li&gt;多表关联时返回全部列。&lt;/li&gt;
&lt;li&gt;总是取出全部列。可简化开发或者有利于某种缓存机制。&lt;/li&gt;
&lt;li&gt;重复查询相同的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;响应时间：包括服务时间和排队时间，排队时间最常见和重要的是IO和锁等待。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;快速上限估计：获得一个大概参考值来判断当前响应时间是不是一个合理的值。&lt;/strong&gt;&lt;br&gt;扫描后返回行数和访问类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;做一个关联查询时，服务器必须要扫描多行才能生成结果集中的一行。扫描的行数对返回的行数的比率通常很小，&lt;br&gt;如果在1:1到10:1之间是比较好的。&lt;/li&gt;
&lt;li&gt;全表扫描 &amp;lt; 索引扫描 &amp;lt; 范围扫描 &amp;lt; 唯一索引查询 &amp;lt; 常数引用。优秀的索引能极大地提高扫描的速度。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;应用WHERE条件时从好到坏依次为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在索引中过滤不匹配的记录，在存储引擎层完成。&lt;/li&gt;
&lt;li&gt;使用索引覆盖扫描，在MySQL服务器层完成，无需回到数据表进行查询。&lt;/li&gt;
&lt;li&gt;从数据表返回数据，MySQL需要先从数据表读出记录然后过滤，在MySQL服务器层完成。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;因此，不需要的数据应该尽可能地从越底层被过滤，如果数据还要提升到服务器层（而不是在存储引擎层）进行过滤&lt;br&gt;那么就会对性能有影响。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果发现查询需要扫描大量的数据但是只返回少数的行，优化技巧如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用索引覆盖扫描&lt;/li&gt;
&lt;li&gt;使用单独的汇总表&lt;/li&gt;
&lt;li&gt;重写查询语句&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;0x02重构查询&quot;&gt;&lt;a href=&quot;#0x02重构查询&quot; class=&quot;headerlink&quot; title=&quot;0x02重构查询&quot;&gt;&lt;/a&gt;0x02重构查询&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;设计查询时，是否需要将一个复杂的查询分成多个简单的查询。&lt;/li&gt;
&lt;li&gt;如果是事务型引擎，很多时候小事务能够更高效。&lt;/li&gt;
&lt;li&gt;分解关联查询的优势和使用场景：&lt;ul&gt;
&lt;li&gt;优势&lt;ul&gt;
&lt;li&gt;让缓存的效率更高&lt;/li&gt;
&lt;li&gt;将查询分解后，执行单个查询可以减少锁的竞争&lt;/li&gt;
&lt;li&gt;查询本身效率也可能有所提升&lt;/li&gt;
&lt;li&gt;可以减少冗余记录的查询&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用场景&lt;ul&gt;
&lt;li&gt;当应用能方便地缓存单个查询的结果&lt;/li&gt;
&lt;li&gt;可以将数据分布到不同的MySQL服务器上&lt;/li&gt;
&lt;li&gt;能够使用IN()方式代替关联查询&lt;/li&gt;
&lt;li&gt;当查询中使用同一个数据表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x03查询执行的步骤&quot;&gt;&lt;a href=&quot;#0x03查询执行的步骤&quot; class=&quot;headerlink&quot; title=&quot;0x03查询执行的步骤&quot;&gt;&lt;/a&gt;0x03查询执行的步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;客户端发送一条查询给服务器。  &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;半双工的。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;将结果缓存还是直接获取？数据量大时，直接获取。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务器先检查查询缓存，如果命中了缓存，则立即返回存储在缓存中的结果，否则进入下一阶段。&lt;ul&gt;
&lt;li&gt;查询缓存中的查询即是只有一个字节不同，那么就不会匹配缓存结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务器端进行SQL解析、预处理，再由优化器生成对应的执行计划。&lt;ul&gt;
&lt;li&gt;SQL语句结构相同而参数不同时，使用&lt;code&gt;prepareStatment()&lt;/code&gt;对大量相同的查询有利。&lt;/li&gt;
&lt;li&gt;优化器是通过成本计算而不是最短时间来选择优化的&lt;/li&gt;
&lt;li&gt;优化策略包括静态（编译）优化和动态（运行）优化&lt;/li&gt;
&lt;li&gt;MySQL的优化器是自动执行的，不需要认为干预，一般运行良好&lt;/li&gt;
&lt;li&gt;需要认为干预时可以使用HINT提示，提前要做好测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MySQL根据优化器生成的执行计划，调用存储引擎的API来执行查询。&lt;ul&gt;
&lt;li&gt;MySQL的执行计划总是一颗左侧深度优先的树&lt;/li&gt;
&lt;li&gt;关联操作时会自动优化执行，关联的表多时采用贪心策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将结果返回给客户端。&lt;ul&gt;
&lt;li&gt;一个增量、逐步返回的过程，好处包括：&lt;ul&gt;
&lt;li&gt;服务器端无须存储太多的结果，节省内存&lt;/li&gt;
&lt;li&gt;让MySQL客户端第一时间获得返回的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x04一些特定的优化策略&quot;&gt;&lt;a href=&quot;#0x04一些特定的优化策略&quot; class=&quot;headerlink&quot; title=&quot;0x04一些特定的优化策略&quot;&gt;&lt;/a&gt;0x04一些特定的优化策略&lt;/h2&gt;&lt;p&gt;具体看书，通用性不大&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x05一个案例学习&quot;&gt;&lt;a href=&quot;#0x05一个案例学习&quot; class=&quot;headerlink&quot; title=&quot;0x05一个案例学习&quot;&gt;&lt;/a&gt;0x05一个案例学习&lt;/h2&gt;&lt;p&gt;使用MySQL构建一个队列表时，不要只用一张表保存整个队列，队列中包括未处理，正在处理和已经处理的数据，&lt;br&gt;而是使用两个（或者以上）表，让未处理的表保持数据量较少，而已处理的数据表为历史数据表。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x06小结&quot;&gt;&lt;a href=&quot;#0x06小结&quot; class=&quot;headerlink&quot; title=&quot;0x06小结&quot;&gt;&lt;/a&gt;0x06小结&lt;/h2&gt;&lt;p&gt;一般来说，先实现再优化，但是要有预见性。所以，切记自己的需求。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h2&gt;&lt;p&gt; &lt;a href=&quot;https://book.douban.com/subject/4241826/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《高性能MySQL · 第三版》&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00前言&quot;&gt;&lt;a href=&quot;#0x00前言&quot; class=&quot;headerlink&quot; title=&quot;0x00前言&quot;&gt;&lt;/a&gt;0x00前言&lt;/h2&gt;&lt;p&gt;本书讲述到定稿前的MySQL5.5版，所以下面内容的适用范围止步于MySQL5.5。本文仅仅强调书中讲述的重中之重，&lt;br&gt;以便快速查阅，详细的内容还请认真阅读书本和MySQL的官方文档。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x01-为什么查询速度会慢&quot;&gt;&lt;a href=&quot;#0x01-为什么查询速度会慢&quot; class=&quot;headerlink&quot; title=&quot;0x01 为什么查询速度会慢&quot;&gt;&lt;/a&gt;0x01 为什么查询速度会慢&lt;/h2&gt;&lt;p&gt;查询性能低下的最基本的原因是访问的数据太多。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询不需要的记录。使用LIMIT来限制。&lt;/li&gt;
&lt;li&gt;多表关联时返回全部列。&lt;/li&gt;
&lt;li&gt;总是取出全部列。可简化开发或者有利于某种缓存机制。&lt;/li&gt;
&lt;li&gt;重复查询相同的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;响应时间：包括服务时间和排队时间，排队时间最常见和重要的是IO和锁等待。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;快速上限估计：获得一个大概参考值来判断当前响应时间是不是一个合理的值。&lt;/strong&gt;&lt;br&gt;扫描后返回行数和访问类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;做一个关联查询时，服务器必须要扫描多行才能生成结果集中的一行。扫描的行数对返回的行数的比率通常很小，&lt;br&gt;如果在1:1到10:1之间是比较好的。&lt;/li&gt;
&lt;li&gt;全表扫描 &amp;lt; 索引扫描 &amp;lt; 范围扫描 &amp;lt; 唯一索引查询 &amp;lt; 常数引用。优秀的索引能极大地提高扫描的速度。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;应用WHERE条件时从好到坏依次为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在索引中过滤不匹配的记录，在存储引擎层完成。&lt;/li&gt;
&lt;li&gt;使用索引覆盖扫描，在MySQL服务器层完成，无需回到数据表进行查询。&lt;/li&gt;
&lt;li&gt;从数据表返回数据，MySQL需要先从数据表读出记录然后过滤，在MySQL服务器层完成。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;因此，不需要的数据应该尽可能地从越底层被过滤，如果数据还要提升到服务器层（而不是在存储引擎层）进行过滤&lt;br&gt;那么就会对性能有影响。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果发现查询需要扫描大量的数据但是只返回少数的行，优化技巧如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用索引覆盖扫描&lt;/li&gt;
&lt;li&gt;使用单独的汇总表&lt;/li&gt;
&lt;li&gt;重写查询语句&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="计算机科学" scheme="http://joshshaw.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="关系型数据库" scheme="http://joshshaw.github.io/tags/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="http://joshshaw.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>《高性能MySQL》の创建高性能的索引</title>
    <link href="http://joshshaw.github.io/2016/04/29/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B%E3%81%AE%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95/"/>
    <id>http://joshshaw.github.io/2016/04/29/《高性能MySQL》の创建高性能的索引/</id>
    <published>2016-04-29T08:07:50.000Z</published>
    <updated>2016-05-12T11:51:53.046Z</updated>
    
    <content type="html">&lt;h2 id=&quot;0x00前言&quot;&gt;&lt;a href=&quot;#0x00前言&quot; class=&quot;headerlink&quot; title=&quot;0x00前言&quot;&gt;&lt;/a&gt;0x00前言&lt;/h2&gt;&lt;p&gt;本书讲述到定稿前的MySQL5.5版，所以下面内容的适用范围止步于MySQL5.5。本文仅仅强调书中讲述的重中之重，&lt;br&gt;以便快速查阅，详细的内容还请认真阅读书本和MySQL的官方文档。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x01索引基础&quot;&gt;&lt;a href=&quot;#0x01索引基础&quot; class=&quot;headerlink&quot; title=&quot;0x01索引基础&quot;&gt;&lt;/a&gt;0x01索引基础&lt;/h2&gt;&lt;p&gt;索引可以包含一个或多个列的值。&lt;/p&gt;
&lt;h3 id=&quot;B-Tree索引&quot;&gt;&lt;a href=&quot;#B-Tree索引&quot; class=&quot;headerlink&quot; title=&quot;B-Tree索引&quot;&gt;&lt;/a&gt;B-Tree索引&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;简介&lt;br&gt;实际上很多存储引擎使用的是B+Tree（如下图）。&lt;ul&gt;
&lt;li&gt;每一个叶子节点都包含指向下一个叶子节点的指针，从而方便叶子节点的范围遍历。&lt;/li&gt;
&lt;li&gt;指向下层子节点的指针实际上定义了子节点页中值的上限和下限。&lt;/li&gt;
&lt;li&gt;叶子节点的指针指向的是被索引的数据。&lt;img src=&quot;/2016/04/29/《高性能MySQL》の创建高性能的索引/b+tree.jpg&quot; alt=&quot;b+tree.jpg&quot; title=&quot;&quot;&gt;
（文章最后有B树和B+树的一些简介）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以使用B-Tree索引的查询类型&lt;ul&gt;
&lt;li&gt;全值匹配&lt;/li&gt;
&lt;li&gt;匹配最左前缀&lt;/li&gt;
&lt;li&gt;匹配列前缀&lt;/li&gt;
&lt;li&gt;匹配范围值&lt;/li&gt;
&lt;li&gt;精确匹配某一列并范围匹配另外一列&lt;/li&gt;
&lt;li&gt;只访问索引的查询&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B-Tree索引的限制&lt;br&gt;这些限制都和索引列的顺序有关。&lt;ul&gt;
&lt;li&gt;不能从索引的中间列开始查找&lt;/li&gt;
&lt;li&gt;不能跳过索引中的列&lt;/li&gt;
&lt;li&gt;若查询中有某个列的范围查询，则右边所有列都无法使用索引来优化查询&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;哈希索引&quot;&gt;&lt;a href=&quot;#哈希索引&quot; class=&quot;headerlink&quot; title=&quot;哈希索引&quot;&gt;&lt;/a&gt;哈希索引&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;简介&lt;br&gt;哈希索引基于哈希表实现，只有精确匹配索引所有列的查询才有效。只有Memory引擎显式支持，且支持的是&lt;br&gt;非唯一哈希索引（哈希值相同的通过链表保存，再做相等比较）同时该引擎也支持B-Tree索引。需要作很多关联&lt;br&gt;的星型schema，使用哈希索引非常适合查找表的需求。&lt;/li&gt;
&lt;li&gt;限制&lt;ul&gt;
&lt;li&gt;哈希索引只包含哈希值和行指针，不能使用索引中的值来避免读取行（不能进行覆盖索引的意思）&lt;/li&gt;
&lt;li&gt;不是按照索引值顺序存储的，无法用于排序&lt;/li&gt;
&lt;li&gt;不支持部分索引列匹配查找&lt;/li&gt;
&lt;li&gt;只支持等值比较查询，不支持范围查询&lt;/li&gt;
&lt;li&gt;哈希冲突高时，代价也较高（可以用红黑树代替链表，Java8的hashmap已经实现）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可创建自定义哈希索引，主键的哈希值作为索引（需要添加hash列作为冗余），通过触发器进行hash列的维护。&lt;br&gt;但是不要用强哈希函数如MD5或者sha，这样hash列会非常长。查询时要在where查询加入哈希判断。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;空间数据索引（R-Tree）&quot;&gt;&lt;a href=&quot;#空间数据索引（R-Tree）&quot; class=&quot;headerlink&quot; title=&quot;空间数据索引（R-Tree）&quot;&gt;&lt;/a&gt;空间数据索引（R-Tree）&lt;/h3&gt;&lt;p&gt;空间索引会从所有维度来索引数据。MySQL的MyISAM支持，InnoDB还不支持，其他数据库如PostgreSQL支持。&lt;/p&gt;
&lt;h3 id=&quot;全文索引&quot;&gt;&lt;a href=&quot;#全文索引&quot; class=&quot;headerlink&quot; title=&quot;全文索引&quot;&gt;&lt;/a&gt;全文索引&lt;/h3&gt;&lt;p&gt;复制&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x02索引的优点&quot;&gt;&lt;a href=&quot;#0x02索引的优点&quot; class=&quot;headerlink&quot; title=&quot;0x02索引的优点&quot;&gt;&lt;/a&gt;0x02索引的优点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;大大减少服务器需要扫描的数据量&lt;/li&gt;
&lt;li&gt;可以帮助服务器避免排序和临时表&lt;/li&gt;
&lt;li&gt;可以将随机IO变为顺序IO&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;“三星”索引的标准&quot;&gt;&lt;a href=&quot;#“三星”索引的标准&quot; class=&quot;headerlink&quot; title=&quot;“三星”索引的标准&quot;&gt;&lt;/a&gt;“三星”索引的标准&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一星：将相关记录放到一起（多列索引）&lt;/li&gt;
&lt;li&gt;二星：索引中的数据顺序和查找中的排序顺序一致&lt;/li&gt;
&lt;li&gt;三星：覆盖索引&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x03高性能的索引策略&quot;&gt;&lt;a href=&quot;#0x03高性能的索引策略&quot; class=&quot;headerlink&quot; title=&quot;0x03高性能的索引策略&quot;&gt;&lt;/a&gt;0x03高性能的索引策略&lt;/h2&gt;&lt;h3 id=&quot;独立的列&quot;&gt;&lt;a href=&quot;#独立的列&quot; class=&quot;headerlink&quot; title=&quot;独立的列&quot;&gt;&lt;/a&gt;独立的列&lt;/h3&gt;&lt;p&gt;如果查询中的列不是独立的，则MySQL就不会使用索引。“独立的列”是指索引列不能是表达式的一部分，也不能是&lt;br&gt;函数的参数。&lt;/p&gt;
&lt;h3 id=&quot;前缀索引和索引选择性&quot;&gt;&lt;a href=&quot;#前缀索引和索引选择性&quot; class=&quot;headerlink&quot; title=&quot;前缀索引和索引选择性&quot;&gt;&lt;/a&gt;前缀索引和索引选择性&lt;/h3&gt;&lt;p&gt;对于BLOB、TEXT或者很长的VARCHAR类型的列，必须使用前缀索引，因为MySQL不允许索引这些列的完整长度。&lt;br&gt;选择足够长的前缀以保证较高地选择性，同时又不能太长（以便节约空间）。&lt;br&gt;下面是选择性的公式：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;COUNT&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;DISTINCT&lt;/span&gt; &amp;lt;&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;&amp;gt;)/&lt;span class=&quot;keyword&quot;&gt;COUNT&lt;/span&gt;(*) &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &amp;lt;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;前缀索引是一种能使用索引更小、更快的有效办法，但另一方面也有其缺点：MySQL无法使用前缀索引做ORDER BY&lt;br&gt;和GROUP BY，也无法使用前缀做覆盖扫描。&lt;br&gt;存储网站的会话（session）时，需要在一个很长的十六进制字符串上创建索引。此时如果采用长度为8的前缀索引&lt;br&gt;通常能显著地提升性能，并且这种方法对上层应用完全透明。&lt;br&gt;有时候后缀索引（suffix index）也有用途（邮箱名称，XXXXXX@~~~.com）。&lt;/p&gt;
&lt;h3 id=&quot;多列索引&quot;&gt;&lt;a href=&quot;#多列索引&quot; class=&quot;headerlink&quot; title=&quot;多列索引&quot;&gt;&lt;/a&gt;多列索引&lt;/h3&gt;&lt;p&gt;不要对每个列创建独立的索引，或者按照错误的顺序创建多列索引（下面会解释怎样是正确的顺序）。&lt;br&gt;糟糕的索引建立：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对多个索引做相交操作（多个AND），需要多列索引而不是每一列一个索引&lt;/li&gt;
&lt;li&gt;对多个索引做联合操作（多个OR），会耗费大量CPU和内存资源在算法的缓存、排序、合并操作上。&lt;/li&gt;
&lt;li&gt;优化器不会把这些计算到“查询成本”中&lt;/li&gt;
&lt;li&gt;有时候UNION的方式往往更好  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;索引合并是MySQL5.0后的新特性，使用EXPLAIN查看发现索引合并时最好重新建立何时的索引。&lt;/p&gt;
&lt;h3 id=&quot;选择合适的索引列顺序&quot;&gt;&lt;a href=&quot;#选择合适的索引列顺序&quot; class=&quot;headerlink&quot; title=&quot;选择合适的索引列顺序&quot;&gt;&lt;/a&gt;选择合适的索引列顺序&lt;/h3&gt;&lt;p&gt;正确的顺序依赖于使用该索引的查询，并且同时需要考虑如何更好地满足排序和分组的需要。（仅适用于B-Tree）&lt;br&gt;&lt;strong&gt;经验法则&lt;/strong&gt;：将选择性最高的列放到索引最前列。&lt;br&gt;当不需要考虑排序和分组的时候，将选择性最高的列放在前面通常是最好的，此时只是用于优化where条件的查询。&lt;br&gt;性能是根据那些运行频率最高的查询来调整索引列的顺序，如上面的公式，即具体值/整体基数。&lt;/p&gt;
&lt;h3 id=&quot;聚簇索引（InnoDB的基本原理，重要）&quot;&gt;&lt;a href=&quot;#聚簇索引（InnoDB的基本原理，重要）&quot; class=&quot;headerlink&quot; title=&quot;聚簇索引（InnoDB的基本原理，重要）&quot;&gt;&lt;/a&gt;聚簇索引（InnoDB的基本原理，重要）&lt;/h3&gt;&lt;p&gt;并不是一种单独的索引类型，而是一种数据存储方式。数据行存放在索引的叶子页中，简单地说就是索引在数据表中。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;优点：&lt;ul&gt;
&lt;li&gt;可以把相关数据保存在一起&lt;/li&gt;
&lt;li&gt;数据访问更快&lt;/li&gt;
&lt;li&gt;使用覆盖索引扫描的查询可以直接使用页节点中的主键值&lt;/li&gt;
&lt;li&gt;最大限度地提高了IO密集型应用性能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点&lt;ul&gt;
&lt;li&gt;若全表都在内存里，就没有任何优势，上述最后一项优点就没有了&lt;/li&gt;
&lt;li&gt;插入速度严重依赖于插入顺序&lt;/li&gt;
&lt;li&gt;更新聚簇索引列的代价很高&lt;/li&gt;
&lt;li&gt;基于聚簇索引的表在插入新行，或者主键被更新导致需要移动行的时候，可能面临“页分裂”问题&lt;/li&gt;
&lt;li&gt;聚簇索引可能导致全表扫描变慢，行比较稀疏时或者页分裂导致数据存储不连续时&lt;/li&gt;
&lt;li&gt;二级索引（非聚簇索引）可能比想象的要更大，因该索引会存储的是主键而不是数据行地址（也是优势之一，因为这样二级索引不会时常改变数据行的地址值）&lt;/li&gt;
&lt;li&gt;二级索引访问需要两次索引查询  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;聚簇索引的每一个叶子节点都包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主键值&lt;/li&gt;
&lt;li&gt;事务ID&lt;/li&gt;
&lt;li&gt;用于事务和MVCC的回滚指针&lt;/li&gt;
&lt;li&gt;所有剩余列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;最好避免随机的（不连续且值得分布范围非常大）聚簇索引。（主键使用AUTO_INCREMENT为佳）&lt;/strong&gt;&lt;br&gt;InnoDB默认的最大填充因子是页大小的15/16，留出部分空间用于以后修改。InnoDB无法简单地总是把新行插入&lt;br&gt;到索引的最后，而是需要为新的行寻找合适的位置（MyISAM可以）。  &lt;/p&gt;
&lt;p&gt;InnoDB写入的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写入的目标页可能已经刷到磁盘上并从缓存中移除，或者还没有被夹在到缓存中。InnoDB在插入之前不得不先找到并从磁盘读取目标页到内存中，会导致大量的随机IO。&lt;/li&gt;
&lt;li&gt;写入是乱序时，InnoDB不得不频繁地做页分裂操作。会导致移动大量数据。&lt;/li&gt;
&lt;li&gt;频繁地页分裂，页会变得稀疏并被不规则地填充，最终数据会有碎片。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;因此尽可能地使用单调递增地聚簇键的值来插入新行。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;覆盖索引&quot;&gt;&lt;a href=&quot;#覆盖索引&quot; class=&quot;headerlink&quot; title=&quot;覆盖索引&quot;&gt;&lt;/a&gt;覆盖索引&lt;/h3&gt;&lt;p&gt;MySQL可以使用索引来直接获取列的数据，这样就不在需要读取数据行。这样的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;索引条目通常远小于数据行大小。会极大地减少数据访问量。索引比数据更小，更容易全部放入内存中。&lt;/li&gt;
&lt;li&gt;索引是按照列值顺序存储的，对于IO密集型的范围查询会比随机从磁盘读取每一行数据的IO要少得多。&lt;/li&gt;
&lt;li&gt;MyISAM在内存中只缓存索引，数据依赖于操作系统来缓存，因此访问数据需要系统调用，会耗时。&lt;/li&gt;
&lt;li&gt;二级主键能覆盖查询，则可以避免对主键索引的二次查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;哈希索引、空间索引和全文索引等都不存储索引列的值，不能做覆盖索引。&lt;/strong&gt;&lt;br&gt;执行LIKE操作或者查询所有列不会执行聚簇索引。但是采用&lt;code&gt;延迟关联&lt;/code&gt;可以作一定的优化。&lt;/p&gt;
&lt;h3 id=&quot;使用索引扫描来做排序&quot;&gt;&lt;a href=&quot;#使用索引扫描来做排序&quot; class=&quot;headerlink&quot; title=&quot;使用索引扫描来做排序&quot;&gt;&lt;/a&gt;使用索引扫描来做排序&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;只有当索引的列顺序和ORDER BY子句的顺序完全一致，并且所有列的排序方向都一样时，才能够使用索引来对结果排序。&lt;/li&gt;
&lt;li&gt;如果是关联查询，只有当ORDER BY子句引用的字段全部为第一个表时，才能使用索引做排序。&lt;/li&gt;
&lt;li&gt;满足最左前缀的要求。例如，第一列提供了常量条件，第二列可进行索引排序。&lt;/li&gt;
&lt;li&gt;其他的都不可以。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;压缩（前缀压缩）索引&quot;&gt;&lt;a href=&quot;#压缩（前缀压缩）索引&quot; class=&quot;headerlink&quot; title=&quot;压缩（前缀压缩）索引&quot;&gt;&lt;/a&gt;压缩（前缀压缩）索引&lt;/h3&gt;&lt;p&gt;MyISAM压缩每个索引块的方法是：先完全保存索引块中的第一个值，然后将其他值赫尔第一个值进行比较得&lt;br&gt;到相同前缀的字节数和剩余的不同后缀部分。&lt;/p&gt;
&lt;h3 id=&quot;冗余和重复索引&quot;&gt;&lt;a href=&quot;#冗余和重复索引&quot; class=&quot;headerlink&quot; title=&quot;冗余和重复索引&quot;&gt;&lt;/a&gt;冗余和重复索引&lt;/h3&gt;&lt;p&gt;冗余：在同一列上创建不同类型的索引来满足不同的查询需求。&lt;br&gt;重复：毫无益处。&lt;br&gt;应该尽量扩展已有的索引而不是创建新索引，但是有时候扩展已有的索引会导致其变太大。&lt;br&gt;当大量的索引到导致性能瓶颈时，删除之。&lt;/p&gt;
&lt;h3 id=&quot;未使用的索引&quot;&gt;&lt;a href=&quot;#未使用的索引&quot; class=&quot;headerlink&quot; title=&quot;未使用的索引&quot;&gt;&lt;/a&gt;未使用的索引&lt;/h3&gt;&lt;p&gt;删除之。&lt;/p&gt;
&lt;h3 id=&quot;索引和锁&quot;&gt;&lt;a href=&quot;#索引和锁&quot; class=&quot;headerlink&quot; title=&quot;索引和锁&quot;&gt;&lt;/a&gt;索引和锁&lt;/h3&gt;&lt;p&gt;InnoDB只有在访问行的时候才会对其加锁，而索引能够减少InnoDB访问的行数，从而减少锁的数量。&lt;br&gt;即使使用了索引，InnoDB也可能锁住一些不需要的数据。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x04索引案例学习（有意思）&quot;&gt;&lt;a href=&quot;#0x04索引案例学习（有意思）&quot; class=&quot;headerlink&quot; title=&quot;0x04索引案例学习（有意思）&quot;&gt;&lt;/a&gt;0x04索引案例学习（有意思）&lt;/h2&gt;&lt;p&gt;尽可能将需要做范围查询的列放到索引的后面，以便优化器能使用尽可能多的索引列。&lt;br&gt;多个等值条件查询不是范围查询。&lt;br&gt;延迟关联的范式：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &amp;lt;cols&amp;gt; &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;profiles&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &amp;lt;primary &lt;span class=&quot;keyword&quot;&gt;key&lt;/span&gt; cols&amp;gt; &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;profiles&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; new_table_name.XXX1=? &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; XXX2 &lt;span class=&quot;keyword&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; new_table_name &lt;span class=&quot;keyword&quot;&gt;USING&lt;/span&gt; (&amp;lt;primary &lt;span class=&quot;keyword&quot;&gt;key&lt;/span&gt; cols&amp;gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x05维护索引和表&quot;&gt;&lt;a href=&quot;#0x05维护索引和表&quot; class=&quot;headerlink&quot; title=&quot;0x05维护索引和表&quot;&gt;&lt;/a&gt;0x05维护索引和表&lt;/h2&gt;&lt;h3 id=&quot;减少索引和数据的碎片&quot;&gt;&lt;a href=&quot;#减少索引和数据的碎片&quot; class=&quot;headerlink&quot; title=&quot;减少索引和数据的碎片&quot;&gt;&lt;/a&gt;减少索引和数据的碎片&lt;/h3&gt;&lt;p&gt;使用OPTMIZE TABLE或者导出再导入的方式来重新整理数据。不支持该指令的表可以改变引擎再执行。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &amp;lt;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;ENGINE&lt;/span&gt;=&amp;lt;&lt;span class=&quot;keyword&quot;&gt;engine&lt;/span&gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行碎片：数据行被存储为多个地方的多个片段中。&lt;/li&gt;
&lt;li&gt;行间碎片：指逻辑上顺序的页，或者行在磁盘上不是顺序存储的。&lt;/li&gt;
&lt;li&gt;剩余空间碎片：值数据页中有大量的空余空间。造成浪费。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果进行碎片整理将数据压缩到一起，可能反而会导致后续的更新操作触发一系列的页分裂和重组，这会&lt;br&gt;对性能造成不良的影响。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x06小结&quot;&gt;&lt;a href=&quot;#0x06小结&quot; class=&quot;headerlink&quot; title=&quot;0x06小结&quot;&gt;&lt;/a&gt;0x06小结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;单行访问是很慢的&lt;/li&gt;
&lt;li&gt;案顺序访问范围数据是很快的&lt;/li&gt;
&lt;li&gt;索引覆盖查询时很快的&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0xff-B树简述&quot;&gt;&lt;a href=&quot;#0xff-B树简述&quot; class=&quot;headerlink&quot; title=&quot;0xff B树简述&quot;&gt;&lt;/a&gt;0xff B树简述&lt;/h2&gt;&lt;p&gt;B树又叫平衡多路查询树，一颗&lt;strong&gt;m&lt;/strong&gt;阶的B树（m叉树）的特征如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;树中每个结点最多含有m个孩子（m&amp;gt;=2）（一般例子m=5）&lt;/li&gt;
&lt;li&gt;除根节点外，其他每个结点（包括中间节点和叶子节点）至少有&lt;code&gt;ceil(m/2)&lt;/code&gt;个孩子（ceil()取上限，2.5取3）（m=5时，ceil(5/2)=3）&lt;/li&gt;
&lt;li&gt;若根节点不是叶子结点，则至少有2个孩子&lt;/li&gt;
&lt;li&gt;所有叶子结点都出现在同一层&lt;/li&gt;
&lt;li&gt;每个非终端结点中包含：&lt;ul&gt;
&lt;li&gt;蓝色槽为元素，橙色为指向下一层的指针&lt;/li&gt;
&lt;li&gt;n为蓝色槽的个数，且&lt;code&gt;ceil(m/2)-1 &amp;lt;= n &amp;lt;= m-1&lt;/code&gt;（m=5时，2&amp;lt;=n&amp;lt;=4）&lt;img src=&quot;/2016/04/29/《高性能MySQL》の创建高性能的索引/btree.jpg&quot; alt=&quot;btree.jpg&quot; title=&quot;&quot;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;删除一个元素时，&lt;strong&gt;先向富裕的子结点借，再向父节点借&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;B树中关键字分布在整个B树中，上层结点出现过的关键字不会再出现在叶结点。&lt;br&gt;B树和B+树的差异是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有n棵子树的结点中含n个关键字（B树为n-1，就是蓝色槽比橙色的指针少一个）&lt;/li&gt;
&lt;li&gt;所有的叶子结点中包含了全部关键字&lt;/li&gt;
&lt;li&gt;所有非终端结点可看成索引部分&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h2&gt;&lt;p&gt; &lt;a href=&quot;https://book.douban.com/subject/4241826/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《高性能MySQL · 第三版》&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://blog.csdn.net/v_JULY_v/article/details/6530142/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;B树、B+树、B*树和R树&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00前言&quot;&gt;&lt;a href=&quot;#0x00前言&quot; class=&quot;headerlink&quot; title=&quot;0x00前言&quot;&gt;&lt;/a&gt;0x00前言&lt;/h2&gt;&lt;p&gt;本书讲述到定稿前的MySQL5.5版，所以下面内容的适用范围止步于MySQL5.5。本文仅仅强调书中讲述的重中之重，&lt;br&gt;以便快速查阅，详细的内容还请认真阅读书本和MySQL的官方文档。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x01索引基础&quot;&gt;&lt;a href=&quot;#0x01索引基础&quot; class=&quot;headerlink&quot; title=&quot;0x01索引基础&quot;&gt;&lt;/a&gt;0x01索引基础&lt;/h2&gt;&lt;p&gt;索引可以包含一个或多个列的值。&lt;/p&gt;
&lt;h3 id=&quot;B-Tree索引&quot;&gt;&lt;a href=&quot;#B-Tree索引&quot; class=&quot;headerlink&quot; title=&quot;B-Tree索引&quot;&gt;&lt;/a&gt;B-Tree索引&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;简介&lt;br&gt;实际上很多存储引擎使用的是B+Tree（如下图）。&lt;ul&gt;
&lt;li&gt;每一个叶子节点都包含指向下一个叶子节点的指针，从而方便叶子节点的范围遍历。&lt;/li&gt;
&lt;li&gt;指向下层子节点的指针实际上定义了子节点页中值的上限和下限。&lt;/li&gt;
&lt;li&gt;叶子节点的指针指向的是被索引的数据。&lt;img src=&quot;/2016/04/29/《高性能MySQL》の创建高性能的索引/b+tree.jpg&quot; alt=&quot;b+tree.jpg&quot; title=&quot;&quot;&gt;
（文章最后有B树和B+树的一些简介）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以使用B-Tree索引的查询类型&lt;ul&gt;
&lt;li&gt;全值匹配&lt;/li&gt;
&lt;li&gt;匹配最左前缀&lt;/li&gt;
&lt;li&gt;匹配列前缀&lt;/li&gt;
&lt;li&gt;匹配范围值&lt;/li&gt;
&lt;li&gt;精确匹配某一列并范围匹配另外一列&lt;/li&gt;
&lt;li&gt;只访问索引的查询&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B-Tree索引的限制&lt;br&gt;这些限制都和索引列的顺序有关。&lt;ul&gt;
&lt;li&gt;不能从索引的中间列开始查找&lt;/li&gt;
&lt;li&gt;不能跳过索引中的列&lt;/li&gt;
&lt;li&gt;若查询中有某个列的范围查询，则右边所有列都无法使用索引来优化查询&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="计算机科学" scheme="http://joshshaw.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="关系型数据库" scheme="http://joshshaw.github.io/tags/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="http://joshshaw.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>《高性能MySQL》のSchema与数据类型优化</title>
    <link href="http://joshshaw.github.io/2016/04/28/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B%E3%81%AESchema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96/"/>
    <id>http://joshshaw.github.io/2016/04/28/《高性能MySQL》のSchema与数据类型优化/</id>
    <published>2016-04-28T05:41:45.000Z</published>
    <updated>2016-04-28T11:23:01.665Z</updated>
    
    <content type="html">&lt;h2 id=&quot;0x00前言&quot;&gt;&lt;a href=&quot;#0x00前言&quot; class=&quot;headerlink&quot; title=&quot;0x00前言&quot;&gt;&lt;/a&gt;0x00前言&lt;/h2&gt;&lt;p&gt;本书讲述到定稿前的MySQL5.5版，所以下面内容的适用范围止步于MySQL5.5。本文仅仅强调书中讲述的重中之重，&lt;br&gt;以便快速查阅，详细的内容还请认真阅读书本和MySQL的官方文档。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x01简介&quot;&gt;&lt;a href=&quot;#0x01简介&quot; class=&quot;headerlink&quot; title=&quot;0x01简介&quot;&gt;&lt;/a&gt;0x01简介&lt;/h2&gt;&lt;p&gt;良好的逻辑设计和物理设计是高性能的基石。Schema的设计是极为重要的，下面将会简单介绍具体情况下适合的设计。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x02选择数据类型&quot;&gt;&lt;a href=&quot;#0x02选择数据类型&quot; class=&quot;headerlink&quot; title=&quot;0x02选择数据类型&quot;&gt;&lt;/a&gt;0x02选择数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;更小的通常更好。这样会占用更少的磁盘，内存和CPU&lt;/li&gt;
&lt;li&gt;简单就好。日期用日期类型DATETIME、TIMESTAMP而不是字符串等等。&lt;/li&gt;
&lt;li&gt;尽量避免NULL。如果该列上建立索引，那么应该尽量避免NULL，但是也不能全不用NULL。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;整数类型&quot;&gt;&lt;a href=&quot;#整数类型&quot; class=&quot;headerlink&quot; title=&quot;整数类型&quot;&gt;&lt;/a&gt;整数类型&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;类型&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;TINYINT&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;SMALLINT&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;MEDIUMINT&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;INT&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;BIGINT&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;比特&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;8&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;16&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;24&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;32&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;64&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;字段非负时最好用上UNSIGNED。标识符一般使用整数字段，并且金钱一般也使用整数来存储，只需要乘以响应的&lt;br&gt;位数，这样计算上不需要使用float或者double，计算速度更快，并且不失精确性。而IPv4地址也最好用整数存储。&lt;/p&gt;
&lt;h3 id=&quot;实数类型&quot;&gt;&lt;a href=&quot;#实数类型&quot; class=&quot;headerlink&quot; title=&quot;实数类型&quot;&gt;&lt;/a&gt;实数类型&lt;/h3&gt;&lt;p&gt;DECIMAL类型也能精确计算，但是代缴较高，能用整数代替时最好用整数。&lt;/p&gt;
&lt;h3 id=&quot;字符串类型&quot;&gt;&lt;a href=&quot;#字符串类型&quot; class=&quot;headerlink&quot; title=&quot;字符串类型&quot;&gt;&lt;/a&gt;字符串类型&lt;/h3&gt;&lt;p&gt;字符串类型用较多种，如VARCHAR、CHAR、TEXT、BOLB等。&lt;br&gt;数据库、表、和表中的列都可以定义自己的字符集和排序规则，但是一般情况下最好统一，这样能简化开发。&lt;br&gt;字符长度不要分配太多，应该分配适合范围内的最小值。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;VARCHAR&quot;&gt;&lt;a href=&quot;#VARCHAR&quot; class=&quot;headerlink&quot; title=&quot;VARCHAR&quot;&gt;&lt;/a&gt;VARCHAR&lt;/h4&gt;&lt;p&gt;VARCHAR需要使用1或者2个额外字节记录字符串的长度，并且要避免使用&lt;code&gt;ROW_FORMAT=FIXED&lt;/code&gt;。能节省存储空间，&lt;br&gt;但是UPDATE时会耗时，于是需要时常更新的列不宜使用。新版本的InnoDB会自动将过长的VARCHAR存储为BLOB。&lt;br&gt;下面场景适合使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当字符串列的最大长度比平均长度大很多&lt;/li&gt;
&lt;li&gt;列更新少&lt;/li&gt;
&lt;li&gt;使用UTF-8字符集&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;CHAR&quot;&gt;&lt;a href=&quot;#CHAR&quot; class=&quot;headerlink&quot; title=&quot;CHAR&quot;&gt;&lt;/a&gt;CHAR&lt;/h4&gt;&lt;p&gt;CHAR类型是定长的，不足时会填充字符，不会产生碎片。新版本的MySQL会去掉最后的空格。下面场景适合使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储密码的MD5等散列&lt;/li&gt;
&lt;li&gt;时常变更的数据&lt;/li&gt;
&lt;li&gt;非常短的列&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;BLOB和TEXT&quot;&gt;&lt;a href=&quot;#BLOB和TEXT&quot; class=&quot;headerlink&quot; title=&quot;BLOB和TEXT&quot;&gt;&lt;/a&gt;BLOB和TEXT&lt;/h4&gt;&lt;p&gt;前者没有排序规则或字符集，后者有。排序只与&lt;code&gt;max_sort-length&lt;/code&gt;有关。&lt;/p&gt;
&lt;h4 id=&quot;枚举（ENUM）代替字符串&quot;&gt;&lt;a href=&quot;#枚举（ENUM）代替字符串&quot; class=&quot;headerlink&quot; title=&quot;枚举（ENUM）代替字符串&quot;&gt;&lt;/a&gt;枚举（ENUM）代替字符串&lt;/h4&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; enum_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e ENUM(&lt;span class=&quot;string&quot;&gt;&#39;fish&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;apple&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;dog&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实际存储的是整数。并且排序是根据整数而不是字符串排序的。添加和删除字符串必须使用ALTER TABLE。&lt;br&gt;当枚举的数量少并且不时常更改时适合使用，还可以减少整体的存储空间。&lt;/p&gt;
&lt;h3 id=&quot;日期和时间类型&quot;&gt;&lt;a href=&quot;#日期和时间类型&quot; class=&quot;headerlink&quot; title=&quot;日期和时间类型&quot;&gt;&lt;/a&gt;日期和时间类型&lt;/h3&gt;&lt;p&gt;DATETIME能保存大范围的值，TIMESTAMP只能到2038年，但是与时区有关，存储也更小，默认为NOT NULL。&lt;br&gt;推荐使用TIMESTAMP。&lt;/p&gt;
&lt;h3 id=&quot;位数据类型&quot;&gt;&lt;a href=&quot;#位数据类型&quot; class=&quot;headerlink&quot; title=&quot;位数据类型&quot;&gt;&lt;/a&gt;位数据类型&lt;/h3&gt;&lt;p&gt;技术上来说都是字符串类型。&lt;/p&gt;
&lt;h4 id=&quot;BIT&quot;&gt;&lt;a href=&quot;#BIT&quot; class=&quot;headerlink&quot; title=&quot;BIT&quot;&gt;&lt;/a&gt;BIT&lt;/h4&gt;&lt;p&gt;如果想用BIT来存储一个false/true值，能通过创建CHAR(0)来代替，其中NULL为false，空字符串为true。&lt;/p&gt;
&lt;h4 id=&quot;SET&quot;&gt;&lt;a href=&quot;#SET&quot; class=&quot;headerlink&quot; title=&quot;SET&quot;&gt;&lt;/a&gt;SET&lt;/h4&gt;&lt;p&gt;保存大量布尔值集合时使用，不过最好用整数类型的8/4/2/1来代替。&lt;/p&gt;
&lt;h3 id=&quot;选择标识符&quot;&gt;&lt;a href=&quot;#选择标识符&quot; class=&quot;headerlink&quot; title=&quot;选择标识符&quot;&gt;&lt;/a&gt;选择标识符&lt;/h3&gt;&lt;p&gt;像QQ号码就是一个标识符。最好使用整数而不是字符串（耗空间，慢）来实现，关联时关联字段的定义要保持一致。&lt;/p&gt;
&lt;h3 id=&quot;特殊类型数据&quot;&gt;&lt;a href=&quot;#特殊类型数据&quot; class=&quot;headerlink&quot; title=&quot;特殊类型数据&quot;&gt;&lt;/a&gt;特殊类型数据&lt;/h3&gt;&lt;p&gt;强烈推荐使用无符号整数存储IP地址，再通过MySQL的&lt;code&gt;INET_ATON()&lt;/code&gt;和&lt;code&gt;INET_NTOA()&lt;/code&gt;来转换。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x03-设计陷阱&quot;&gt;&lt;a href=&quot;#0x03-设计陷阱&quot; class=&quot;headerlink&quot; title=&quot;0x03 设计陷阱&quot;&gt;&lt;/a&gt;0x03 设计陷阱&lt;/h2&gt;&lt;p&gt;以下的设计要尽量避免：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;太多的列。当需要使用的数据并不是全部时&lt;/li&gt;
&lt;li&gt;太多的关联。太多关联会使得查询变慢&lt;/li&gt;
&lt;li&gt;全能和变相的枚举。枚举尽量避免使用&lt;/li&gt;
&lt;li&gt;哪里都不用NULL。有时候NULL是必须并且有效的&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x04范式和反范式&quot;&gt;&lt;a href=&quot;#0x04范式和反范式&quot; class=&quot;headerlink&quot; title=&quot;0x04范式和反范式&quot;&gt;&lt;/a&gt;0x04范式和反范式&lt;/h2&gt;&lt;h3 id=&quot;范式的优缺点&quot;&gt;&lt;a href=&quot;#范式的优缺点&quot; class=&quot;headerlink&quot; title=&quot;范式的优缺点&quot;&gt;&lt;/a&gt;范式的优缺点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;更新操作快&lt;/li&gt;
&lt;li&gt;没有重复数据&lt;/li&gt;
&lt;li&gt;表通常更小，更好地放在内存里&lt;/li&gt;
&lt;li&gt;更少地需要使用DISTINCT或者GROUP BY&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点是需要关联，使得一些索引策略无效&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;反范式的优缺点&quot;&gt;&lt;a href=&quot;#反范式的优缺点&quot; class=&quot;headerlink&quot; title=&quot;反范式的优缺点&quot;&gt;&lt;/a&gt;反范式的优缺点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;避免关联&lt;/li&gt;
&lt;li&gt;当数据量大得比内存多时速度很快&lt;/li&gt;
&lt;li&gt;避免随机IO&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点是更改字段时需要做更多，存储也更多&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;混用范式和反范式&quot;&gt;&lt;a href=&quot;#混用范式和反范式&quot; class=&quot;headerlink&quot; title=&quot;混用范式和反范式&quot;&gt;&lt;/a&gt;混用范式和反范式&lt;/h3&gt;&lt;p&gt;排序和汇总时可以适当地使用反范式。&lt;/p&gt;
&lt;h3 id=&quot;缓存表和汇总表&quot;&gt;&lt;a href=&quot;#缓存表和汇总表&quot; class=&quot;headerlink&quot; title=&quot;缓存表和汇总表&quot;&gt;&lt;/a&gt;缓存表和汇总表&lt;/h3&gt;&lt;p&gt;如果能容忍少量的脏数据来增强实时性时可以使用。前者是逻辑上的冗余数据，后者在逻辑上并不冗余。&lt;/p&gt;
&lt;h3 id=&quot;计数器表&quot;&gt;&lt;a href=&quot;#计数器表&quot; class=&quot;headerlink&quot; title=&quot;计数器表&quot;&gt;&lt;/a&gt;计数器表&lt;/h3&gt;&lt;p&gt;加槽来提搞并发量，并且定时删除过多的列。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x05加快ALTER-TABLE操作的速度&quot;&gt;&lt;a href=&quot;#0x05加快ALTER-TABLE操作的速度&quot; class=&quot;headerlink&quot; title=&quot;0x05加快ALTER TABLE操作的速度&quot;&gt;&lt;/a&gt;0x05加快ALTER TABLE操作的速度&lt;/h2&gt;&lt;p&gt;书上的做法并不可取，最好通过在备库上执行ALTER TABLE操作，再切换主备库来实现。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x06小结&quot;&gt;&lt;a href=&quot;#0x06小结&quot; class=&quot;headerlink&quot; title=&quot;0x06小结&quot;&gt;&lt;/a&gt;0x06小结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;尽量避免过度的设计&lt;/li&gt;
&lt;li&gt;尽可能地避免使用NULL值，但也不能太过&lt;/li&gt;
&lt;li&gt;尽量使用相同的数据类型存储相似或相关的值&lt;/li&gt;
&lt;li&gt;注意可变长字符串，临时表和排序时可能会使用大量的内存&lt;/li&gt;
&lt;li&gt;尽量使用整型定义标识列&lt;/li&gt;
&lt;li&gt;小心使用ENUM和SET，最好避免使用BIT&lt;/li&gt;
&lt;li&gt;通过在备库上执行ALTER TABLE操作，再切换主备库&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/4241826/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《高性能MySQL · 第三版》&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00前言&quot;&gt;&lt;a href=&quot;#0x00前言&quot; class=&quot;headerlink&quot; title=&quot;0x00前言&quot;&gt;&lt;/a&gt;0x00前言&lt;/h2&gt;&lt;p&gt;本书讲述到定稿前的MySQL5.5版，所以下面内容的适用范围止步于MySQL5.5。本文仅仅强调书中讲述的重中之重，&lt;br&gt;以便快速查阅，详细的内容还请认真阅读书本和MySQL的官方文档。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x01简介&quot;&gt;&lt;a href=&quot;#0x01简介&quot; class=&quot;headerlink&quot; title=&quot;0x01简介&quot;&gt;&lt;/a&gt;0x01简介&lt;/h2&gt;&lt;p&gt;良好的逻辑设计和物理设计是高性能的基石。Schema的设计是极为重要的，下面将会简单介绍具体情况下适合的设计。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x02选择数据类型&quot;&gt;&lt;a href=&quot;#0x02选择数据类型&quot; class=&quot;headerlink&quot; title=&quot;0x02选择数据类型&quot;&gt;&lt;/a&gt;0x02选择数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;更小的通常更好。这样会占用更少的磁盘，内存和CPU&lt;/li&gt;
&lt;li&gt;简单就好。日期用日期类型DATETIME、TIMESTAMP而不是字符串等等。&lt;/li&gt;
&lt;li&gt;尽量避免NULL。如果该列上建立索引，那么应该尽量避免NULL，但是也不能全不用NULL。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;整数类型&quot;&gt;&lt;a href=&quot;#整数类型&quot; class=&quot;headerlink&quot; title=&quot;整数类型&quot;&gt;&lt;/a&gt;整数类型&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;类型&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;TINYINT&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;SMALLINT&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;MEDIUMINT&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;INT&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;BIGINT&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;比特&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;8&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;16&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;24&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;32&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;64&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;字段非负时最好用上UNSIGNED。标识符一般使用整数字段，并且金钱一般也使用整数来存储，只需要乘以响应的&lt;br&gt;位数，这样计算上不需要使用float或者double，计算速度更快，并且不失精确性。而IPv4地址也最好用整数存储。&lt;/p&gt;
&lt;h3 id=&quot;实数类型&quot;&gt;&lt;a href=&quot;#实数类型&quot; class=&quot;headerlink&quot; title=&quot;实数类型&quot;&gt;&lt;/a&gt;实数类型&lt;/h3&gt;&lt;p&gt;DECIMAL类型也能精确计算，但是代缴较高，能用整数代替时最好用整数。&lt;/p&gt;
&lt;h3 id=&quot;字符串类型&quot;&gt;&lt;a href=&quot;#字符串类型&quot; class=&quot;headerlink&quot; title=&quot;字符串类型&quot;&gt;&lt;/a&gt;字符串类型&lt;/h3&gt;&lt;p&gt;字符串类型用较多种，如VARCHAR、CHAR、TEXT、BOLB等。&lt;br&gt;数据库、表、和表中的列都可以定义自己的字符集和排序规则，但是一般情况下最好统一，这样能简化开发。&lt;br&gt;字符长度不要分配太多，应该分配适合范围内的最小值。&lt;br&gt;
    
    </summary>
    
      <category term="计算机科学" scheme="http://joshshaw.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="关系型数据库" scheme="http://joshshaw.github.io/tags/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="http://joshshaw.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>《高性能MySQL》の复制</title>
    <link href="http://joshshaw.github.io/2016/04/26/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B%E3%81%AE%E5%A4%8D%E5%88%B6/"/>
    <id>http://joshshaw.github.io/2016/04/26/《高性能MySQL》の复制/</id>
    <published>2016-04-26T11:19:20.000Z</published>
    <updated>2016-04-28T11:21:59.653Z</updated>
    
    <content type="html">&lt;h2 id=&quot;0x00前言&quot;&gt;&lt;a href=&quot;#0x00前言&quot; class=&quot;headerlink&quot; title=&quot;0x00前言&quot;&gt;&lt;/a&gt;0x00前言&lt;/h2&gt;&lt;p&gt;本书讲述到定稿前的MySQL5.5版，所以下面内容的适用范围止步于MySQL5.5。本文仅仅强调书中讲述的重中之重，&lt;br&gt;以便快速查阅，详细的内容还请认真阅读书本和MySQL的官方文档。&lt;/p&gt;
&lt;h2 id=&quot;0x01简介&quot;&gt;&lt;a href=&quot;#0x01简介&quot; class=&quot;headerlink&quot; title=&quot;0x01简介&quot;&gt;&lt;/a&gt;0x01简介&lt;/h2&gt;&lt;p&gt;本章阐述所有与复制相关的内容&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简要介绍复制如何工作&lt;/li&gt;
&lt;li&gt;讨论基本的复制服务搭建&lt;ul&gt;
&lt;li&gt;与复制相关的配置&lt;/li&gt;
&lt;li&gt;如何管理和优化复制服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x02复制概述&quot;&gt;&lt;a href=&quot;#0x02复制概述&quot; class=&quot;headerlink&quot; title=&quot;0x02复制概述&quot;&gt;&lt;/a&gt;0x02复制概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;MySQL支持两种复制方式：基于行的复制和基于语句的复制。&lt;/li&gt;
&lt;li&gt;都是通过主库上记录二进制日志，虽然有开销，但是不会很大。&lt;/li&gt;
&lt;li&gt;同一时间点备库上的数据可能与主库存在不一致性，并无法保证主备之间的延迟。&lt;/li&gt;
&lt;li&gt;通过复制可以将读操作指向备库来获得更好地读扩展。&lt;/li&gt;
&lt;li&gt;目前备库只能串行化执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;复制解决的问题&quot;&gt;&lt;a href=&quot;#复制解决的问题&quot; class=&quot;headerlink&quot; title=&quot;复制解决的问题&quot;&gt;&lt;/a&gt;复制解决的问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数据分布&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;li&gt;备份&lt;/li&gt;
&lt;li&gt;高可用性和故障切换&lt;/li&gt;
&lt;li&gt;MySQL升级&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;复制如何工作&quot;&gt;&lt;a href=&quot;#复制如何工作&quot; class=&quot;headerlink&quot; title=&quot;复制如何工作&quot;&gt;&lt;/a&gt;复制如何工作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;主库把数据更改记录到二进制日志中。&lt;/li&gt;
&lt;li&gt;备库将主库上的日志复制到自己的中继日志中。&lt;/li&gt;
&lt;li&gt;备库读取中继日志中的事件，将其重放到备库数据之上。&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;0x03配置复制&quot;&gt;&lt;a href=&quot;#0x03配置复制&quot; class=&quot;headerlink&quot; title=&quot;0x03配置复制&quot;&gt;&lt;/a&gt;0x03配置复制&lt;/h2&gt;&lt;p&gt;（略）&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x04复制的原理&quot;&gt;&lt;a href=&quot;#0x04复制的原理&quot; class=&quot;headerlink&quot; title=&quot;0x04复制的原理&quot;&gt;&lt;/a&gt;0x04复制的原理&lt;/h2&gt;&lt;p&gt;现在一般使用基于行的复制更佳。&lt;/p&gt;
&lt;h3 id=&quot;基于语句的复制（逻辑复制）&quot;&gt;&lt;a href=&quot;#基于语句的复制（逻辑复制）&quot; class=&quot;headerlink&quot; title=&quot;基于语句的复制（逻辑复制）&quot;&gt;&lt;/a&gt;基于语句的复制（逻辑复制）&lt;/h3&gt;&lt;h4 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;实现相当简单&lt;/li&gt;
&lt;li&gt;不用太多带宽&lt;/li&gt;
&lt;li&gt;容易理解&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;缺点&quot;&gt;&lt;a href=&quot;#缺点&quot; class=&quot;headerlink&quot; title=&quot;缺点&quot;&gt;&lt;/a&gt;缺点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;很多情况无法正确复制，如使用了now()等函数&lt;/li&gt;
&lt;li&gt;若使用了触发器或者存储过程也最好不要使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;基于行的复制&quot;&gt;&lt;a href=&quot;#基于行的复制&quot; class=&quot;headerlink&quot; title=&quot;基于行的复制&quot;&gt;&lt;/a&gt;基于行的复制&lt;/h3&gt;&lt;h4 id=&quot;优点-1&quot;&gt;&lt;a href=&quot;#优点-1&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;减少锁的使用，更高效地复制数据&lt;/li&gt;
&lt;li&gt;占用更少的CPU&lt;/li&gt;
&lt;li&gt;解决数据不一致的情况&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;缺点-1&quot;&gt;&lt;a href=&quot;#缺点-1&quot; class=&quot;headerlink&quot; title=&quot;缺点&quot;&gt;&lt;/a&gt;缺点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;无法知道服务器正在做什么&lt;/li&gt;
&lt;li&gt;无法处理诸如在备库修改表的schema的情况&lt;/li&gt;
&lt;li&gt;带宽较高&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x05复制拓扑（往后补充图）&quot;&gt;&lt;a href=&quot;#0x05复制拓扑（往后补充图）&quot; class=&quot;headerlink&quot; title=&quot;0x05复制拓扑（往后补充图）&quot;&gt;&lt;/a&gt;0x05复制拓扑（往后补充图）&lt;/h2&gt;&lt;p&gt;MySQL的复制有一个限制：每个备库只能有一个主库，但是可以用一些其他方法来解决这样的限制。&lt;/p&gt;
&lt;h3 id=&quot;一主库多备库（多用于备份和读写分离）&quot;&gt;&lt;a href=&quot;#一主库多备库（多用于备份和读写分离）&quot; class=&quot;headerlink&quot; title=&quot;一主库多备库（多用于备份和读写分离）&quot;&gt;&lt;/a&gt;一主库多备库（多用于备份和读写分离）&lt;/h3&gt;&lt;p&gt;备库之间根本没有交互。有以下用途：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为不同的角色使用不同的备库&lt;/li&gt;
&lt;li&gt;可把一个备库当做代用的主库&lt;/li&gt;
&lt;li&gt;把备库放在远程数据中心，用作灾难恢复&lt;/li&gt;
&lt;li&gt;备份，培训，开发，测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;主动-主动模式下的主-主复制&quot;&gt;&lt;a href=&quot;#主动-主动模式下的主-主复制&quot; class=&quot;headerlink&quot; title=&quot;主动-主动模式下的主-主复制&quot;&gt;&lt;/a&gt;主动-主动模式下的主-主复制&lt;/h3&gt;&lt;p&gt;用于两个处于不同地理位置的办公室，并且都需要一份可写的数据拷贝。弊大于利。&lt;/p&gt;
&lt;h3 id=&quot;主动-被动模式下的主-主复制&quot;&gt;&lt;a href=&quot;#主动-被动模式下的主-主复制&quot; class=&quot;headerlink&quot; title=&quot;主动-被动模式下的主-主复制&quot;&gt;&lt;/a&gt;主动-被动模式下的主-主复制&lt;/h3&gt;&lt;p&gt;切换主动被动服务器很方便。&lt;/p&gt;
&lt;h3 id=&quot;拥有备库的主-主结构&quot;&gt;&lt;a href=&quot;#拥有备库的主-主结构&quot; class=&quot;headerlink&quot; title=&quot;拥有备库的主-主结构&quot;&gt;&lt;/a&gt;拥有备库的主-主结构&lt;/h3&gt;&lt;p&gt;（用于增加冗余）&lt;/p&gt;
&lt;h3 id=&quot;环形复制&quot;&gt;&lt;a href=&quot;#环形复制&quot; class=&quot;headerlink&quot; title=&quot;环形复制&quot;&gt;&lt;/a&gt;环形复制&lt;/h3&gt;&lt;p&gt;（要避免成环）&lt;/p&gt;
&lt;h3 id=&quot;主库、分发主库以及备库&quot;&gt;&lt;a href=&quot;#主库、分发主库以及备库&quot; class=&quot;headerlink&quot; title=&quot;主库、分发主库以及备库&quot;&gt;&lt;/a&gt;主库、分发主库以及备库&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当备库足够多时。会对主库造成很大的负载，于是需要采用blackhole存储引擎的分发主库。&lt;/li&gt;
&lt;li&gt;不一定只使用一个分发主库。&lt;/li&gt;
&lt;li&gt;blackhole表没有任何数据，但是目前有bug&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;树或金字塔形&quot;&gt;&lt;a href=&quot;#树或金字塔形&quot; class=&quot;headerlink&quot; title=&quot;树或金字塔形&quot;&gt;&lt;/a&gt;树或金字塔形&lt;/h3&gt;&lt;p&gt;(多台备库)&lt;/p&gt;
&lt;h3 id=&quot;定制的复制方案&quot;&gt;&lt;a href=&quot;#定制的复制方案&quot; class=&quot;headerlink&quot; title=&quot;定制的复制方案&quot;&gt;&lt;/a&gt;定制的复制方案&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;选择复制性&lt;/li&gt;
&lt;li&gt;分离功能（分离OLTP和OLAP）&lt;/li&gt;
&lt;li&gt;数据归档&lt;/li&gt;
&lt;li&gt;将备库用作全文索引&lt;/li&gt;
&lt;li&gt;只读备库&lt;/li&gt;
&lt;li&gt;模拟多主库复制&lt;/li&gt;
&lt;li&gt;创建没有数据的日志服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x06复制和容量规划&quot;&gt;&lt;a href=&quot;#0x06复制和容量规划&quot; class=&quot;headerlink&quot; title=&quot;0x06复制和容量规划&quot;&gt;&lt;/a&gt;0x06复制和容量规划&lt;/h2&gt;&lt;p&gt;主备库的模式下，并不是增加备库就能线性增加读写功能。并且在开启复制功能时，要考虑监控延时，可用性（各个&lt;br&gt;库的状态，包括主和被），规划冗余容量和性能，改变主库，还有解决问题的方法。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x07-MySQL复制的高级特性&quot;&gt;&lt;a href=&quot;#0x07-MySQL复制的高级特性&quot; class=&quot;headerlink&quot; title=&quot;0x07 MySQL复制的高级特性&quot;&gt;&lt;/a&gt;0x07 MySQL复制的高级特性&lt;/h2&gt;&lt;h3 id=&quot;半同步复制&quot;&gt;&lt;a href=&quot;#半同步复制&quot; class=&quot;headerlink&quot; title=&quot;半同步复制&quot;&gt;&lt;/a&gt;半同步复制&lt;/h3&gt;&lt;p&gt;可以帮助确保备库拥有主库数据的拷贝，减少潜在的数据丢失危机。有助于备库提供更好地冗余度和持久性。&lt;br&gt;半同步复制在提交过程中增加一个延迟：当提交事务时，在客户端接收到查询结束反馈前必须保证二进制日志已经传输&lt;br&gt;到至少一台备库上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在主库上已经完成&lt;strong&gt;事务&lt;/strong&gt;提交，只有通知客户端被延迟了。&lt;/li&gt;
&lt;li&gt;备库在接&lt;strong&gt;收到事务后&lt;/strong&gt;发送反馈而非（备库）完成事务后发送。&lt;/li&gt;
&lt;li&gt;如果备库一直没有回应已收到事件，会超时并转化为正常的异步复制模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;复制心跳&quot;&gt;&lt;a href=&quot;#复制心跳&quot; class=&quot;headerlink&quot; title=&quot;复制心跳&quot;&gt;&lt;/a&gt;复制心跳&lt;/h3&gt;&lt;p&gt;保持备库一直与主库相联系，避免悄无声息地断开连接。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x08小结&quot;&gt;&lt;a href=&quot;#0x08小结&quot; class=&quot;headerlink&quot; title=&quot;0x08小结&quot;&gt;&lt;/a&gt;0x08小结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;KISS原则（Keep It Simple Stupid），用简单的就好。&lt;/li&gt;
&lt;li&gt;监控，监控，监控，重要的事情说三遍。&lt;/li&gt;
&lt;li&gt;理解复制的异步本质，且设计你的应用避免或容忍从备库读取脏数据。&lt;/li&gt;
&lt;li&gt;在一个复制拓扑中不要写入多于一个服务器，把备库配置为只读，并降低权限以阻止对数据的改变。&lt;/li&gt;
&lt;li&gt;打开本章锁讨论的明智且安全的设置。（往后补充）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/4241826/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《高性能MySQL · 第三版》&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00前言&quot;&gt;&lt;a href=&quot;#0x00前言&quot; class=&quot;headerlink&quot; title=&quot;0x00前言&quot;&gt;&lt;/a&gt;0x00前言&lt;/h2&gt;&lt;p&gt;本书讲述到定稿前的MySQL5.5版，所以下面内容的适用范围止步于MySQL5.5。本文仅仅强调书中讲述的重中之重，&lt;br&gt;以便快速查阅，详细的内容还请认真阅读书本和MySQL的官方文档。&lt;/p&gt;
&lt;h2 id=&quot;0x01简介&quot;&gt;&lt;a href=&quot;#0x01简介&quot; class=&quot;headerlink&quot; title=&quot;0x01简介&quot;&gt;&lt;/a&gt;0x01简介&lt;/h2&gt;&lt;p&gt;本章阐述所有与复制相关的内容&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简要介绍复制如何工作&lt;/li&gt;
&lt;li&gt;讨论基本的复制服务搭建&lt;ul&gt;
&lt;li&gt;与复制相关的配置&lt;/li&gt;
&lt;li&gt;如何管理和优化复制服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x02复制概述&quot;&gt;&lt;a href=&quot;#0x02复制概述&quot; class=&quot;headerlink&quot; title=&quot;0x02复制概述&quot;&gt;&lt;/a&gt;0x02复制概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;MySQL支持两种复制方式：基于行的复制和基于语句的复制。&lt;/li&gt;
&lt;li&gt;都是通过主库上记录二进制日志，虽然有开销，但是不会很大。&lt;/li&gt;
&lt;li&gt;同一时间点备库上的数据可能与主库存在不一致性，并无法保证主备之间的延迟。&lt;/li&gt;
&lt;li&gt;通过复制可以将读操作指向备库来获得更好地读扩展。&lt;/li&gt;
&lt;li&gt;目前备库只能串行化执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;复制解决的问题&quot;&gt;&lt;a href=&quot;#复制解决的问题&quot; class=&quot;headerlink&quot; title=&quot;复制解决的问题&quot;&gt;&lt;/a&gt;复制解决的问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数据分布&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;li&gt;备份&lt;/li&gt;
&lt;li&gt;高可用性和故障切换&lt;/li&gt;
&lt;li&gt;MySQL升级&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;复制如何工作&quot;&gt;&lt;a href=&quot;#复制如何工作&quot; class=&quot;headerlink&quot; title=&quot;复制如何工作&quot;&gt;&lt;/a&gt;复制如何工作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;主库把数据更改记录到二进制日志中。&lt;/li&gt;
&lt;li&gt;备库将主库上的日志复制到自己的中继日志中。&lt;/li&gt;
&lt;li&gt;备库读取中继日志中的事件，将其重放到备库数据之上。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="计算机科学" scheme="http://joshshaw.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="关系型数据库" scheme="http://joshshaw.github.io/tags/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="http://joshshaw.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>《高性能MySQL》のMySQL高级特性</title>
    <link href="http://joshshaw.github.io/2016/04/22/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B%E3%81%AEMySQL%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>http://joshshaw.github.io/2016/04/22/《高性能MySQL》のMySQL高级特性/</id>
    <published>2016-04-22T06:28:02.000Z</published>
    <updated>2016-04-28T11:23:31.083Z</updated>
    
    <content type="html">&lt;h2 id=&quot;0x00前言&quot;&gt;&lt;a href=&quot;#0x00前言&quot; class=&quot;headerlink&quot; title=&quot;0x00前言&quot;&gt;&lt;/a&gt;0x00前言&lt;/h2&gt;&lt;p&gt;本书讲述到定稿前的MySQL5.5版，所以下面内容的适用范围止步于MySQL5.5。本文仅仅强调书中讲述的重中之重，&lt;br&gt;以便快速查阅，详细的内容还请认真阅读书本和MySQL的官方文档。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x01简介&quot;&gt;&lt;a href=&quot;#0x01简介&quot; class=&quot;headerlink&quot; title=&quot;0x01简介&quot;&gt;&lt;/a&gt;0x01简介&lt;/h2&gt;&lt;p&gt;本章讨论了MySQL的分区表，视图，外键，存储过程，绑定变量，插件，字符集，全文索引，XA事务，查询缓存。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x02具体&quot;&gt;&lt;a href=&quot;#0x02具体&quot; class=&quot;headerlink&quot; title=&quot;0x02具体&quot;&gt;&lt;/a&gt;0x02具体&lt;/h2&gt;&lt;h3 id=&quot;分区表&quot;&gt;&lt;a href=&quot;#分区表&quot; class=&quot;headerlink&quot; title=&quot;分区表&quot;&gt;&lt;/a&gt;分区表&lt;/h3&gt;&lt;p&gt;适用于大数据量的过滤场景，或者数据分为历史数据和热点数据，对于单条记录的查询并没有多少优势。&lt;/p&gt;
&lt;h4 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h4&gt;&lt;p&gt;通过句柄对象转化成对存储引擎的接口调用，对于SQL层是完全封装底层实现的黑盒子。&lt;br&gt;CURD操作都会先代开并锁住所有的底层表，然后在解锁不需要的表。所以并不是在处理过程中都锁住表。&lt;/p&gt;
&lt;h4 id=&quot;适用条件&quot;&gt;&lt;a href=&quot;#适用条件&quot; class=&quot;headerlink&quot; title=&quot;适用条件&quot;&gt;&lt;/a&gt;适用条件&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;表非常大，或者表的最后部分是热点数据，其余是历史数据。&lt;/li&gt;
&lt;li&gt;想大批量地删除数据，可以使用清除整个分区的方式。&lt;/li&gt;
&lt;li&gt;分区表可以分布在不同的物理设备上。&lt;/li&gt;
&lt;li&gt;避免某些特殊瓶颈。如ext3文件系统的inode锁竞争。&lt;/li&gt;
&lt;li&gt;可以备份和恢复独立的分区。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;限制和性能问题&quot;&gt;&lt;a href=&quot;#限制和性能问题&quot; class=&quot;headerlink&quot; title=&quot;限制和性能问题&quot;&gt;&lt;/a&gt;限制和性能问题&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;所用分区都必须使用相同的存储引擎。&lt;/li&gt;
&lt;li&gt;有些存储引擎不支持分区。&lt;/li&gt;
&lt;li&gt;在创建分区时可以使用表达式，但在查询时却只能根据列来过滤分区。&lt;/li&gt;
&lt;li&gt;分区列和索引列不匹配。&lt;/li&gt;
&lt;li&gt;选择分区成本的成本很高时。&lt;/li&gt;
&lt;li&gt;打开并锁住底层表的成本很高时（若本身查询操作是快速的）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;视图&quot;&gt;&lt;a href=&quot;#视图&quot; class=&quot;headerlink&quot; title=&quot;视图&quot;&gt;&lt;/a&gt;视图&lt;/h3&gt;&lt;p&gt;简化应用程序的SQL语句编写（诸如表联结），或者使用视图实现基于列的权限控制，重构schema等。&lt;/p&gt;
&lt;h4 id=&quot;原理-1&quot;&gt;&lt;a href=&quot;#原理-1&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;临时表算法&lt;br&gt;先执行视图的查询语言生成临时表，再通过临时表执行查找。视图中包含GROUP BY、DISTINCT、任何&lt;br&gt;聚合函数、UNION、子查询等，只要无法在原表记录和视图记录中建立一一映射的场景时，只能采用临时表算法。&lt;/li&gt;
&lt;li&gt;合并算法&lt;br&gt;将定义视图的语句与查询语句合并，进行一次查询操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;性能影响和缺点&quot;&gt;&lt;a href=&quot;#性能影响和缺点&quot; class=&quot;headerlink&quot; title=&quot;性能影响和缺点&quot;&gt;&lt;/a&gt;性能影响和缺点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;临时表没有索引。&lt;/li&gt;
&lt;li&gt;不支持物化视图。&lt;/li&gt;
&lt;li&gt;有些情况视图不可以被更新（包括更改联接键，视图定义使用聚合函数等）。&lt;/li&gt;
&lt;li&gt;MySQL目前不支持触发器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;外键&quot;&gt;&lt;a href=&quot;#外键&quot; class=&quot;headerlink&quot; title=&quot;外键&quot;&gt;&lt;/a&gt;外键&lt;/h3&gt;&lt;p&gt;为确保系统完整性的额外特性，会带来较高地效率代价，外键导致的死锁问题难以排查。如果要设计高性能系统，&lt;br&gt;建议通过应用程序而不是外键来维护数据的完整性。&lt;/p&gt;
&lt;h3 id=&quot;存储过程&quot;&gt;&lt;a href=&quot;#存储过程&quot; class=&quot;headerlink&quot; title=&quot;存储过程&quot;&gt;&lt;/a&gt;存储过程&lt;/h3&gt;&lt;p&gt;存储过程和存储函数都可以接收参数然后返回值，触发器和事件却不行。&lt;br&gt;可以节省很多网络开销，也可以操纵一些没有权限的表，但是bug较多，使用时要慎重考虑。&lt;/p&gt;
&lt;h3 id=&quot;绑定变量&quot;&gt;&lt;a href=&quot;#绑定变量&quot; class=&quot;headerlink&quot; title=&quot;绑定变量&quot;&gt;&lt;/a&gt;绑定变量&lt;/h3&gt;&lt;p&gt;对于大量重复类型的查询语句，性能会有很大的提升。一般来说，利大于弊，使用还能保证一定的安全性。&lt;/p&gt;
&lt;h4 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在服务器端只需要解析一次SQL语句。&lt;/li&gt;
&lt;li&gt;某些优化器的工作只需要执行一次。&lt;/li&gt;
&lt;li&gt;以二进制方式只发送参数和句柄，比起每次都发送ASCII码文本效率更高。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;代码样例&quot;&gt;&lt;a href=&quot;#代码样例&quot; class=&quot;headerlink&quot; title=&quot;代码样例&quot;&gt;&lt;/a&gt;代码样例&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; flag=&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Connection conn=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        PreparedStatement ps=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String sql=&lt;span class=&quot;string&quot;&gt;&quot;update user set pwd=? where name=?&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        conn=DBConnUtil.getConn();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ps=conn.prepareStatement(sql);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ps.setString(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, user.getPwd());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ps.setString(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, user.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i= ps.executeUpdate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                flag=&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (SQLException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            DBConnUtil.closeAll(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, ps, conn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; flag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;插件&quot;&gt;&lt;a href=&quot;#插件&quot; class=&quot;headerlink&quot; title=&quot;插件&quot;&gt;&lt;/a&gt;插件&lt;/h3&gt;&lt;p&gt;用C或C++编写插件来扩展MySQL的功能，极客所为。&lt;/p&gt;
&lt;h3 id=&quot;字符集&quot;&gt;&lt;a href=&quot;#字符集&quot; class=&quot;headerlink&quot; title=&quot;字符集&quot;&gt;&lt;/a&gt;字符集&lt;/h3&gt;&lt;p&gt;数据库，表间的字符集最好统一，但是是否使用UTF-8看情况而定。&lt;/p&gt;
&lt;h3 id=&quot;全文索引&quot;&gt;&lt;a href=&quot;#全文索引&quot; class=&quot;headerlink&quot; title=&quot;全文索引&quot;&gt;&lt;/a&gt;全文索引&lt;/h3&gt;&lt;p&gt;最好使用Lucene、Sphinx来解决全文索引问题。&lt;/p&gt;
&lt;h3 id=&quot;XA事务&quot;&gt;&lt;a href=&quot;#XA事务&quot; class=&quot;headerlink&quot; title=&quot;XA事务&quot;&gt;&lt;/a&gt;XA事务&lt;/h3&gt;&lt;p&gt;除非真正明白XA事务，否则不要轻易更改默认配置。&lt;/p&gt;
&lt;h3 id=&quot;查询缓存&quot;&gt;&lt;a href=&quot;#查询缓存&quot; class=&quot;headerlink&quot; title=&quot;查询缓存&quot;&gt;&lt;/a&gt;查询缓存&lt;/h3&gt;&lt;p&gt;真正需要查询缓存时才使用，否则不要使用。使用时不要设置太大的缓存内存。&lt;br&gt;如果希望有更高的缓存效率，最好在应用程序提供缓存。&lt;/p&gt;
&lt;h4 id=&quot;适用条件-1&quot;&gt;&lt;a href=&quot;#适用条件-1&quot; class=&quot;headerlink&quot; title=&quot;适用条件&quot;&gt;&lt;/a&gt;适用条件&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;UPDATE、DELETE和INSERT操作相比SELECT来说非常少时。&lt;/li&gt;
&lt;li&gt;被缓存的查询本身消耗巨大，即使缓存命中率非常低，也仍然会对系统性能提升有好处。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x04小结&quot;&gt;&lt;a href=&quot;#0x04小结&quot; class=&quot;headerlink&quot; title=&quot;0x04小结&quot;&gt;&lt;/a&gt;0x04小结&lt;/h2&gt;&lt;p&gt;以上的高级特性都不是万能药，使用时要充分用与不用的测量，还包括考虑当前数据库的版本。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/4241826/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《高性能MySQL · 第三版》&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00前言&quot;&gt;&lt;a href=&quot;#0x00前言&quot; class=&quot;headerlink&quot; title=&quot;0x00前言&quot;&gt;&lt;/a&gt;0x00前言&lt;/h2&gt;&lt;p&gt;本书讲述到定稿前的MySQL5.5版，所以下面内容的适用范围止步于MySQL5.5。本文仅仅强调书中讲述的重中之重，&lt;br&gt;以便快速查阅，详细的内容还请认真阅读书本和MySQL的官方文档。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x01简介&quot;&gt;&lt;a href=&quot;#0x01简介&quot; class=&quot;headerlink&quot; title=&quot;0x01简介&quot;&gt;&lt;/a&gt;0x01简介&lt;/h2&gt;&lt;p&gt;本章讨论了MySQL的分区表，视图，外键，存储过程，绑定变量，插件，字符集，全文索引，XA事务，查询缓存。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x02具体&quot;&gt;&lt;a href=&quot;#0x02具体&quot; class=&quot;headerlink&quot; title=&quot;0x02具体&quot;&gt;&lt;/a&gt;0x02具体&lt;/h2&gt;&lt;h3 id=&quot;分区表&quot;&gt;&lt;a href=&quot;#分区表&quot; class=&quot;headerlink&quot; title=&quot;分区表&quot;&gt;&lt;/a&gt;分区表&lt;/h3&gt;&lt;p&gt;适用于大数据量的过滤场景，或者数据分为历史数据和热点数据，对于单条记录的查询并没有多少优势。&lt;/p&gt;
&lt;h4 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h4&gt;&lt;p&gt;通过句柄对象转化成对存储引擎的接口调用，对于SQL层是完全封装底层实现的黑盒子。&lt;br&gt;CURD操作都会先代开并锁住所有的底层表，然后在解锁不需要的表。所以并不是在处理过程中都锁住表。&lt;/p&gt;
&lt;h4 id=&quot;适用条件&quot;&gt;&lt;a href=&quot;#适用条件&quot; class=&quot;headerlink&quot; title=&quot;适用条件&quot;&gt;&lt;/a&gt;适用条件&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;表非常大，或者表的最后部分是热点数据，其余是历史数据。&lt;/li&gt;
&lt;li&gt;想大批量地删除数据，可以使用清除整个分区的方式。&lt;/li&gt;
&lt;li&gt;分区表可以分布在不同的物理设备上。&lt;/li&gt;
&lt;li&gt;避免某些特殊瓶颈。如ext3文件系统的inode锁竞争。&lt;/li&gt;
&lt;li&gt;可以备份和恢复独立的分区。
    
    </summary>
    
      <category term="计算机科学" scheme="http://joshshaw.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="关系型数据库" scheme="http://joshshaw.github.io/tags/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="http://joshshaw.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>TCP三次握手与四次挥手</title>
    <link href="http://joshshaw.github.io/2016/04/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>http://joshshaw.github.io/2016/04/11/TCP三次握手与四次挥手/</id>
    <published>2016-04-11T09:00:01.000Z</published>
    <updated>2016-04-20T08:50:27.993Z</updated>
    
    <content type="html">&lt;img src=&quot;/2016/04/11/TCP三次握手与四次挥手/tcp.png&quot; alt=&quot;tcp.png&quot; title=&quot;&quot;&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;上图左为tcp连接的状态机，每个圆矩形为一个状态，每个状态有一行或者两行，第一行为该状态的名称，&lt;br&gt;第二行（有的话）为该状态能（或者需要）发送的报文。&lt;br&gt;虚线箭头路径为服务器的常见状态转移路线。虚线框为关闭连接的状态集合。每个状态转移都是通过事件&lt;br&gt;触发，一般为收到一些特定的报文。&lt;br&gt;上图右为时间线下的状态转移示意图，分为常见和特殊情况。&lt;/p&gt;
&lt;h2 id=&quot;状态&quot;&gt;&lt;a href=&quot;#状态&quot; class=&quot;headerlink&quot; title=&quot;状态&quot;&gt;&lt;/a&gt;状态&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#CLOSED&quot;&gt;CLOSED&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#LISTEN&quot;&gt;LISTEN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#SYN_SENT&quot;&gt;SYN_SENT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#SYN_RCVD&quot;&gt;SYN_RCVD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ESTABLISED&quot;&gt;ESTABLISED&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#FIN_WAIT_1&quot;&gt;FIN_WAIT_1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#FIN_WAIT_2&quot;&gt;FIN_WAIT_2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#CLOSING&quot;&gt;CLOSING&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#TIME_WAIT&quot;&gt;TIME_WAIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#CLOSE_WAIT&quot;&gt;CLOSE_WAIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#LAST_ACK&quot;&gt;LAST_ACK&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;详解&quot;&gt;&lt;a href=&quot;#详解&quot; class=&quot;headerlink&quot; title=&quot;详解&quot;&gt;&lt;/a&gt;详解&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;CLOSED&quot;&gt;&lt;a href=&quot;#CLOSED&quot; class=&quot;headerlink&quot; title=&quot;CLOSED&quot;&gt;&lt;/a&gt;CLOSED&lt;/h3&gt;&lt;p&gt;端口未打开时为此状态。相当于初始状态和终止状态。&lt;/p&gt;
&lt;h3 id=&quot;LISTEN&quot;&gt;&lt;a href=&quot;#LISTEN&quot; class=&quot;headerlink&quot; title=&quot;LISTEN&quot;&gt;&lt;/a&gt;LISTEN&lt;/h3&gt;&lt;p&gt;当服务器打开端口监听时，服务器等待客户端进行连接（被动）。  &lt;/p&gt;
&lt;h3 id=&quot;SYN-SENT&quot;&gt;&lt;a href=&quot;#SYN-SENT&quot; class=&quot;headerlink&quot; title=&quot;SYN_SENT&quot;&gt;&lt;/a&gt;SYN_SENT&lt;/h3&gt;&lt;p&gt;客户端主动对服务器进行连接，会向服务器发送SYN报文。&lt;br&gt;有时候，服务器也会从LISTEN状态转到该状态，说明服务器端进行主动连接，但是&lt;strong&gt;极为罕见&lt;/strong&gt;。&lt;br&gt;此外，主动关闭连接或者客户端在一定时间范围内完全没有接到任何报文（超时）时，该状态会进入&lt;br&gt;CLOSED状态，结束连接。&lt;/p&gt;
&lt;h3 id=&quot;SYN-RCVD&quot;&gt;&lt;a href=&quot;#SYN-RCVD&quot; class=&quot;headerlink&quot; title=&quot;SYN_RCVD&quot;&gt;&lt;/a&gt;SYN_RCVD&lt;/h3&gt;&lt;p&gt;服务器处于LISTEN状态，当收到客户端发送的SYN报文时，变为该状态。服务器处于该状态时需要完成&lt;br&gt;与客户端的握手流程，将会发送SYN和对此前客户端发送SYN报文的ACK确认。&lt;br&gt;当服务器收到客户端发送的RST报文后，说明客户端希望取消连接，此时服务器会回到LISTEN状态；&lt;br&gt;此外，服务器在一定时间范围内完全没有接到任何报文（超时）时，会关闭监听端口，到达CLOSED终止状态，&lt;br&gt;服务器主动关闭端口监听时，会进入FIN_WAIT_1状态。&lt;/p&gt;
&lt;h3 id=&quot;ESTABLISED&quot;&gt;&lt;a href=&quot;#ESTABLISED&quot; class=&quot;headerlink&quot; title=&quot;ESTABLISED&quot;&gt;&lt;/a&gt;ESTABLISED&lt;/h3&gt;&lt;p&gt;客户端（服务器）收到服务器（客户端）对自己此前的SYN报文的ACK确认后，进入此状态，表明已经建立了连接。  &lt;/p&gt;
&lt;h3 id=&quot;FIN-WAIT-1&quot;&gt;&lt;a href=&quot;#FIN-WAIT-1&quot; class=&quot;headerlink&quot; title=&quot;FIN_WAIT_1&quot;&gt;&lt;/a&gt;FIN_WAIT_1&lt;/h3&gt;&lt;p&gt;建立连接双方中的一方主动关闭连接时，会发送FIN报文，进入该状态。&lt;/p&gt;
&lt;h3 id=&quot;FIN-WAIT-2&quot;&gt;&lt;a href=&quot;#FIN-WAIT-2&quot; class=&quot;headerlink&quot; title=&quot;FIN_WAIT_2&quot;&gt;&lt;/a&gt;FIN_WAIT_2&lt;/h3&gt;&lt;p&gt;主动关闭连接的一方收到被动方的对FIN的ACK确认报文后，进入该状态。&lt;/p&gt;
&lt;h3 id=&quot;CLOSING&quot;&gt;&lt;a href=&quot;#CLOSING&quot; class=&quot;headerlink&quot; title=&quot;CLOSING&quot;&gt;&lt;/a&gt;CLOSING&lt;/h3&gt;&lt;p&gt;主动关闭连接的一方在监听对自己FIN报文的ACK确认报文期间收到对方的FIN报文时进入该状态。&lt;br&gt;该状态说明双方都在此段时间段内主动请求关闭。&lt;/p&gt;
&lt;h3 id=&quot;TIME-WAIT&quot;&gt;&lt;a href=&quot;#TIME-WAIT&quot; class=&quot;headerlink&quot; title=&quot;TIME_WAIT&quot;&gt;&lt;/a&gt;TIME_WAIT&lt;/h3&gt;&lt;p&gt;主动请求关闭的一方收到对方的FIN报文后，会对该FIN报文进行ACK确认，那么此时进入该状态。&lt;br&gt;该状态等待2MSL的时间，若收不到对方的FIN报文，说明对方已经收到自己发出的ACK确认报文，最终&lt;br&gt;连接关闭，进入CLOSED。&lt;br&gt;有时候，FIN_WAIT_1会直接进入该状态，情况在于被动方刚好在发送ACK(FIN)的同时捎带了FIN，表明自己也&lt;br&gt;要关闭了，不过此情况也&lt;strong&gt;比较罕见&lt;/strong&gt;，并且可以通过先进入FIN_WAIT_2在进入TIME_WAIT来代替。&lt;/p&gt;
&lt;h3 id=&quot;CLOSE-WAIT&quot;&gt;&lt;a href=&quot;#CLOSE-WAIT&quot; class=&quot;headerlink&quot; title=&quot;CLOSE_WAIT&quot;&gt;&lt;/a&gt;CLOSE_WAIT&lt;/h3&gt;&lt;p&gt;被动关闭的一方收到FIN报文时，进入该状态，该状态需要发送对FIN报文的ACK确认。&lt;/p&gt;
&lt;h3 id=&quot;LAST-ACK&quot;&gt;&lt;a href=&quot;#LAST-ACK&quot; class=&quot;headerlink&quot; title=&quot;LAST_ACK&quot;&gt;&lt;/a&gt;LAST_ACK&lt;/h3&gt;&lt;p&gt;被动一方也关闭连接时，将发送FIN报文，进入该状态。收到自己发出的FIN的ACK确认报文后，关闭连接，&lt;br&gt;进入CLOSED。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/04/11/TCP三次握手与四次挥手/tcp.png&quot; alt=&quot;tcp.png&quot; title=&quot;&quot;&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;上图左为tcp连接的状态机，每个圆矩形为一个状态，每个状态有一行或者两行，第一行为该状态的名称，&lt;br&gt;第二行（有的话）为该状态能（或者需要）发送的报文。&lt;br&gt;虚线箭头路径为服务器的常见状态转移路线。虚线框为关闭连接的状态集合。每个状态转移都是通过事件&lt;br&gt;触发，一般为收到一些特定的报文。&lt;br&gt;上图右为时间线下的状态转移示意图，分为常见和特殊情况。&lt;/p&gt;
&lt;h2 id=&quot;状态&quot;&gt;&lt;a href=&quot;#状态&quot; class=&quot;headerlink&quot; title=&quot;状态&quot;&gt;&lt;/a&gt;状态&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#CLOSED&quot;&gt;CLOSED&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#LISTEN&quot;&gt;LISTEN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#SYN_SENT&quot;&gt;SYN_SENT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#SYN_RCVD&quot;&gt;SYN_RCVD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ESTABLISED&quot;&gt;ESTABLISED&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#FIN_WAIT_1&quot;&gt;FIN_WAIT_1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#FIN_WAIT_2&quot;&gt;FIN_WAIT_2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#CLOSING&quot;&gt;CLOSING&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#TIME_WAIT&quot;&gt;TIME_WAIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#CLOSE_WAIT&quot;&gt;CLOSE_WAIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#LAST_ACK&quot;&gt;LAST_ACK&lt;/a&gt;
    
    </summary>
    
      <category term="技术博客" scheme="http://joshshaw.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="计算机网络" scheme="http://joshshaw.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>小资-两道编程题</title>
    <link href="http://joshshaw.github.io/2016/04/05/%E5%B0%8F%E8%B5%84-%E4%B8%A4%E9%81%93%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    <id>http://joshshaw.github.io/2016/04/05/小资-两道编程题/</id>
    <published>2016-04-05T02:36:12.000Z</published>
    <updated>2016-04-22T06:25:38.711Z</updated>
    
    <content type="html">&lt;h1 id=&quot;0x00第一题（回形矩阵）&quot;&gt;&lt;a href=&quot;#0x00第一题（回形矩阵）&quot; class=&quot;headerlink&quot; title=&quot;0x00第一题（回形矩阵）&quot;&gt;&lt;/a&gt;0x00第一题（回形矩阵）&lt;/h1&gt;&lt;h2 id=&quot;0x01描述&quot;&gt;&lt;a href=&quot;#0x01描述&quot; class=&quot;headerlink&quot; title=&quot;0x01描述&quot;&gt;&lt;/a&gt;0x01描述&lt;/h2&gt;&lt;p&gt;输入矩阵的边长，如5，然后生成如下的回形矩阵，最后一行行地输出。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; 1  2  3  4  5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16 17 18 19  6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15 24 25 20  7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14 23 22 21  8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13 12 11 10  9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x02思路&quot;&gt;&lt;a href=&quot;#0x02思路&quot; class=&quot;headerlink&quot; title=&quot;0x02思路&quot;&gt;&lt;/a&gt;0x02思路&lt;/h2&gt;&lt;p&gt;定义上下左右四个方向，递增地往当前方向走，判断越界或者是否已经被占用，是则向右走，&lt;br&gt;再一次判断是否可以走，可以则走，不可以说明已经全部走完，程序结束。&lt;br&gt;于是在代码中最主要的方法为&lt;code&gt;boolean hasNext()&lt;/code&gt;，同时对越界的判断要仔细。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x03代码&quot;&gt;&lt;a href=&quot;#0x03代码&quot; class=&quot;headerlink&quot; title=&quot;0x03代码&quot;&gt;&lt;/a&gt;0x03代码&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Scanner;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; java.lang.System.in;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; java.lang.System.out;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; Direction &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		UP, DOWN, LEFT, RIGHT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Direction direction = Direction.RIGHT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; o[][] = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, j=-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.n = n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		o = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; [n][n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(direction)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; RIGHT:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			++j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(j&amp;gt;=n || o[i][j]!=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				direction = Direction.DOWN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				--j; ++i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; DOWN:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			++i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i&amp;gt;=n || o[i][j]!=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				direction = Direction.LEFT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				--i; --j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; LEFT:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			--j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(j&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || o[i][j]!=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				direction = Direction.UP;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				++j; --i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; UP:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			--i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || o[i][j]!=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				direction = Direction.RIGHT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				++i; ++j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(o[i][j]!=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; put)&lt;/span&gt; &lt;/span&gt;&amp;#123;o[i][j]=put;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(hasNext())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			next(t++);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; x&amp;lt;n; ++x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; y&amp;lt;n; ++y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				out.print(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;+o[x][y]+&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Scanner scanner = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Scanner(in);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; input = scanner.nextInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Main m = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Main(input);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m.init();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m.print();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;0x10第二题（求最长回文串长度）&quot;&gt;&lt;a href=&quot;#0x10第二题（求最长回文串长度）&quot; class=&quot;headerlink&quot; title=&quot;0x10第二题（求最长回文串长度）&quot;&gt;&lt;/a&gt;0x10第二题（求最长回文串长度）&lt;/h1&gt;&lt;h2 id=&quot;0x11描述&quot;&gt;&lt;a href=&quot;#0x11描述&quot; class=&quot;headerlink&quot; title=&quot;0x11描述&quot;&gt;&lt;/a&gt;0x11描述&lt;/h2&gt;&lt;p&gt;找出一个字符串中的最大回文子串的长度。子串不需要连续。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;input: xafedgkdfe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output: 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reason: fd(g/k)df&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x12思路&quot;&gt;&lt;a href=&quot;#0x12思路&quot; class=&quot;headerlink&quot; title=&quot;0x12思路&quot;&gt;&lt;/a&gt;0x12思路&lt;/h2&gt;&lt;p&gt;设该字符串为str，&lt;br&gt;长度为len，&lt;br&gt;最大回文子串的长度为maxLen[i][j]，i为该字符串的最左下标，j为最右下标。&lt;br&gt;那么maxLen[0][len-1]为最终解。&lt;br&gt;并且有状态转移方程：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;               | 1                                       str[i]==str[j], i==j&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;maxLen[i][j] = | 2 + maxLen[i+1][j-1]                    str[i]==str[j], i&amp;gt;j且i+1&amp;gt;j-1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               | 2                                       str[i]==str[j], i+1&amp;lt;j-1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               | max( maxLen[i+1][j], maxLen[i][j-1] )   str[i]!=str[j]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上述的状态转移方程说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个字符本身就是一个回文串，那么长度为1&lt;/li&gt;
&lt;li&gt;当前后两个字符相等时，其最大长度就是2加上除去这两个字符所包含的子串的最大回文长度&lt;/li&gt;
&lt;li&gt;在情况2的基础上，如果这两个字符是相邻的，那么最大长度就是2&lt;/li&gt;
&lt;li&gt;当前后两个字符不相等，那么其最大长度由舍去前面字符的最大长度和舍去最后字符的最大长度中的最大值决定。&lt;br&gt;拥有状态转移方程，当然可以用动态规划来做，就是代码编写的难度比较大，其外使用递归的方法实现是简单易懂，缺点是&lt;br&gt;嵌套递归过多，重复子过多。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;0x13代码&quot;&gt;&lt;a href=&quot;#0x13代码&quot; class=&quot;headerlink&quot; title=&quot;0x13代码&quot;&gt;&lt;/a&gt;0x13代码&lt;/h2&gt;&lt;h3 id=&quot;0x14递归实现&quot;&gt;&lt;a href=&quot;#0x14递归实现&quot; class=&quot;headerlink&quot; title=&quot;0x14递归实现&quot;&gt;&lt;/a&gt;0x14递归实现&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Scanner;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;M&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MaxLength&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; str[], &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j)&lt;/span&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i == j)    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i &amp;gt; j)   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (str[i] == str[j]) &amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + MaxLength(str, i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, j - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Math.max(MaxLength(str, i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, j), MaxLength(str, i, j - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Scanner s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Scanner(System.in);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; str[];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    str = s.nextLine().toCharArray();   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    System.out.println( MaxLength(str, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, str.length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;0x15动态规划&quot;&gt;&lt;a href=&quot;#0x15动态规划&quot; class=&quot;headerlink&quot; title=&quot;0x15动态规划&quot;&gt;&lt;/a&gt;0x15动态规划&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Scanner;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;M2&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; str[];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; slen;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxlen[][];   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;M2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String string)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		slen = string.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		str = string.toCharArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		maxlen = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; [slen][slen];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LongestLen&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, j, len;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; slen; i++)     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        maxlen[i][i] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (len = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; len &amp;lt; slen; len++) &amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; slen - len; i++) &amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            j = i + len;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (str[i] == str[j]) &amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;gt; j - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                    maxlen[i][j] = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                    maxlen[i][j] = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + maxlen[i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                maxlen[i][j] = Math.max(maxlen[i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j], maxlen[i][j - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &lt;span class=&quot;comment&quot;&gt;//print();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; maxlen[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][slen - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;slen;++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j&amp;lt;slen;++j)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				System.out.print(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;+maxlen[i][j]+&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;System.out.println();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String arg[])&lt;/span&gt; &lt;/span&gt;&amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    Scanner s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Scanner(System.in);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    String string = s.nextLine();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; M2(string).LongestLen();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    System.out.println(l);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00第一题（回形矩阵）&quot;&gt;&lt;a href=&quot;#0x00第一题（回形矩阵）&quot; class=&quot;headerlink&quot; title=&quot;0x00第一题（回形矩阵）&quot;&gt;&lt;/a&gt;0x00第一题（回形矩阵）&lt;/h1&gt;&lt;h2 id=&quot;0x01描述&quot;&gt;&lt;a href=&quot;#0x01描述&quot; class=&quot;headerlink&quot; title=&quot;0x01描述&quot;&gt;&lt;/a&gt;0x01描述&lt;/h2&gt;&lt;p&gt;输入矩阵的边长，如5，然后生成如下的回形矩阵，最后一行行地输出。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; 1  2  3  4  5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16 17 18 19  6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15 24 25 20  7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14 23 22 21  8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13 12 11 10  9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x02思路&quot;&gt;&lt;a href=&quot;#0x02思路&quot; class=&quot;headerlink&quot; title=&quot;0x02思路&quot;&gt;&lt;/a&gt;0x02思路&lt;/h2&gt;&lt;p&gt;定义上下左右四个方向，递增地往当前方向走，判断越界或者是否已经被占用，是则向右走，&lt;br&gt;再一次判断是否可以走，可以则走，不可以说明已经全部走完，程序结束。&lt;br&gt;于是在代码中最主要的方法为&lt;code&gt;boolean hasNext()&lt;/code&gt;，同时对越界的判断要仔细。&lt;br&gt;
    
    </summary>
    
      <category term="技术博客" scheme="http://joshshaw.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="递归" scheme="http://joshshaw.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="控制" scheme="http://joshshaw.github.io/tags/%E6%8E%A7%E5%88%B6/"/>
    
      <category term="动态规划" scheme="http://joshshaw.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>堆，堆排序，及Java实现</title>
    <link href="http://joshshaw.github.io/2016/03/30/%E5%A0%86%EF%BC%8C%E5%A0%86%E6%8E%92%E5%BA%8F%EF%BC%8C%E5%8F%8AJava%E5%AE%9E%E7%8E%B0/"/>
    <id>http://joshshaw.github.io/2016/03/30/堆，堆排序，及Java实现/</id>
    <published>2016-03-30T09:21:12.000Z</published>
    <updated>2016-03-30T11:14:56.710Z</updated>
    
    <content type="html">&lt;h2 id=&quot;0x00简介&quot;&gt;&lt;a href=&quot;#0x00简介&quot; class=&quot;headerlink&quot; title=&quot;0x00简介&quot;&gt;&lt;/a&gt;0x00简介&lt;/h2&gt;&lt;p&gt;堆是一个完全二叉树的结构，可以用数组实现。最大（小）堆使用递归定义：非叶节点的权值比左右子节点的&lt;br&gt;权值都大（小）。&lt;/p&gt;
&lt;h2 id=&quot;0x01代码&quot;&gt;&lt;a href=&quot;#0x01代码&quot; class=&quot;headerlink&quot; title=&quot;0x01代码&quot;&gt;&lt;/a&gt;0x01代码&lt;/h2&gt;&lt;p&gt;引用一个博客的代码，在此基础之上小改了一点点，并且更新了一下注释。重点在于&lt;code&gt;heapify(int i, int size)&lt;/code&gt;&lt;br&gt;方法和&lt;code&gt;buildHeap()&lt;/code&gt;方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;heapify(int i, int size)&lt;/code&gt;&lt;br&gt;该方法使得当前节点通过权值的比较落到合适的位置，包括位置不变或者落到子节点内。就最大堆为例，如图&lt;br&gt;子节点的&lt;code&gt;10&lt;/code&gt;最大，于是&lt;code&gt;5&lt;/code&gt;和&lt;code&gt;10&lt;/code&gt;位置互换，此时以&lt;code&gt;5&lt;/code&gt;为子根节点的子树结构可能不符合定义，于是递归&lt;br&gt;地为执行&lt;code&gt;heapify()&lt;/code&gt;方法。     &lt;img src=&quot;/2016/03/30/堆，堆排序，及Java实现/pic1.png&quot; alt=&quot;堆化前后&quot; title=&quot;堆化前后&quot;&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buildHeap()&lt;/code&gt;&lt;br&gt;该方法让所有的非子节点进行一次堆化。堆化次序由底部到顶部的原因是&lt;code&gt;heapify()&lt;/code&gt;方法有一个大前提，&lt;br&gt;就是待堆化的子根节点的左右子树已经符合最大（小）堆的定义。堆化次序由底部到顶部保证了每次堆化的&lt;br&gt;正确性。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Comparator;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Heap&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//以数组形式存储堆元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; T[] heap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 用于比较堆中的元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * c.compare(根,叶子) &amp;gt; 0 用于创建最大堆&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * c.compare(根,叶子) &amp;lt; 0 用于创建最小堆&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Comparator&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T&amp;gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Heap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T[] a, Comparator&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T&amp;gt; c)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.heap = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.c = c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		buildHeap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 对堆进行排序。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 每次把堆顶和堆尾互换位置，针对堆顶做一次堆化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 相当于堆顶出堆，然后剩下的数组做一次堆化操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = heap.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			swap(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			heapify(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 返回左子节点的下标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 返回值为2(i+1)-1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ((i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 返回右子节点的下标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 返回值为2(i+1)+1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 堆化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;heapify&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		heapify(i, heap.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 堆化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;heapify&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l = left(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r = right(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; next = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//当前节点非叶节点 &amp;amp;&amp;amp; 左子节点比当前节点大&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (l &amp;lt; size &amp;amp;&amp;amp; c.compare(heap[l], heap[i]) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			next = l;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//当前节点非叶节点 &amp;amp;&amp;amp; 右子节点比较大节点大&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (r &amp;lt; size &amp;amp;&amp;amp; c.compare(heap[r], heap[next]) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			next = r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i == next) &lt;span class=&quot;comment&quot;&gt;//结构稳定，方法返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		swap(i, next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		heapify(next, size);&lt;span class=&quot;comment&quot;&gt;//检查下层的稳定性，递归调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//交换数组值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		T tmp = heap[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		heap[i] = heap[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		heap[j] = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 创建堆&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;buildHeap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = (heap.length) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			heapify(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Integer[] temp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Integer[] &amp;#123; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//最大堆性质&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Comparator&amp;lt;Integer&amp;gt; comp1 = (o1, o2)-&amp;gt;o1-o2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//最小堆性质&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Comparator&amp;lt;Integer&amp;gt; comp2 = (o1, o2)-&amp;gt;o2-o1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//创建最大堆&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Heap&amp;lt;Integer&amp;gt; heap = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Heap&amp;lt;Integer&amp;gt;(temp, comp1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i : temp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.print(i + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		heap.sort();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i : temp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.print(i + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;0xFF-References&quot;&gt;&lt;a href=&quot;#0xFF-References&quot; class=&quot;headerlink&quot; title=&quot;0xFF References&quot;&gt;&lt;/a&gt;0xFF References&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://lotusyu.iteye.com/blog/1061822&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://lotusyu.iteye.com/blog/1061822&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00简介&quot;&gt;&lt;a href=&quot;#0x00简介&quot; class=&quot;headerlink&quot; title=&quot;0x00简介&quot;&gt;&lt;/a&gt;0x00简介&lt;/h2&gt;&lt;p&gt;堆是一个完全二叉树的结构，可以用数组实现。最大（小）堆使用递归定义：非叶节点的权值比左右子节点的&lt;br&gt;权值都大（小）。&lt;/p&gt;
&lt;h2 id=&quot;0x01代码&quot;&gt;&lt;a href=&quot;#0x01代码&quot; class=&quot;headerlink&quot; title=&quot;0x01代码&quot;&gt;&lt;/a&gt;0x01代码&lt;/h2&gt;&lt;p&gt;引用一个博客的代码，在此基础之上小改了一点点，并且更新了一下注释。重点在于&lt;code&gt;heapify(int i, int size)&lt;/code&gt;&lt;br&gt;方法和&lt;code&gt;buildHeap()&lt;/code&gt;方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;heapify(int i, int size)&lt;/code&gt;&lt;br&gt;该方法使得当前节点通过权值的比较落到合适的位置，包括位置不变或者落到子节点内。就最大堆为例，如图&lt;br&gt;子节点的&lt;code&gt;10&lt;/code&gt;最大，于是&lt;code&gt;5&lt;/code&gt;和&lt;code&gt;10&lt;/code&gt;位置互换，此时以&lt;code&gt;5&lt;/code&gt;为子根节点的子树结构可能不符合定义，于是递归&lt;br&gt;地为执行&lt;code&gt;heapify()&lt;/code&gt;方法。     &lt;img src=&quot;/2016/03/30/堆，堆排序，及Java实现/pic1.png&quot; alt=&quot;堆化前后&quot; title=&quot;堆化前后&quot;&gt;
    
    </summary>
    
      <category term="技术博客" scheme="http://joshshaw.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="堆" scheme="http://joshshaw.github.io/tags/%E5%A0%86/"/>
    
      <category term="数据结构" scheme="http://joshshaw.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="排序" scheme="http://joshshaw.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>用栈模拟队列VS用队列模拟栈</title>
    <link href="http://joshshaw.github.io/2016/03/27/%E7%94%A8%E6%A0%88%E6%A8%A1%E6%8B%9F%E9%98%9F%E5%88%97VS%E7%94%A8%E9%98%9F%E5%88%97%E6%A8%A1%E6%8B%9F%E6%A0%88/"/>
    <id>http://joshshaw.github.io/2016/03/27/用栈模拟队列VS用队列模拟栈/</id>
    <published>2016-03-27T11:26:54.000Z</published>
    <updated>2016-03-30T11:01:22.714Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 既生瑜，何生亮？《三国演义》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x01-用栈模拟队列&quot;&gt;&lt;a href=&quot;#0x01-用栈模拟队列&quot; class=&quot;headerlink&quot; title=&quot;0x01 用栈模拟队列&quot;&gt;&lt;/a&gt;0x01 用栈模拟队列&lt;/h2&gt;&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;队列是先进先出。如果把元素放进栈里，那么先出的是栈底元素。入队列直接用入栈1操作的话，&lt;br&gt;出队列就先把栈1内除开栈底的元素弹到另一个栈2，然后弹出栈1底元素。这是因为栈2原本没有&lt;br&gt;元素，如果栈2有元素，此时的元素的出队顺序和栈2弹出元素的顺序一致，栈2弹出元素即可，&lt;br&gt;直到栈2没有元素，此时又需要重复栈1弹到栈2的操作。&lt;/p&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.EmptyStackException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Stack;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StackToQueue&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Stack&amp;lt;E&amp;gt; s1, s2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StackToQueue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		s1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Stack&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		s2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Stack&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;title&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(E e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s1.push(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;title&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!s2.isEmpty())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s2.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(s1.size()&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				s2.push(s1.pop());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			E e = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				e = s1.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(EmptyStackException ex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s1.isEmpty() &amp;amp;&amp;amp; s2.isEmpty();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s1.size() + s2.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;0x02-用队列模拟栈&quot;&gt;&lt;a href=&quot;#0x02-用队列模拟栈&quot; class=&quot;headerlink&quot; title=&quot;0x02 用队列模拟栈&quot;&gt;&lt;/a&gt;0x02 用队列模拟栈&lt;/h2&gt;&lt;h3 id=&quot;思路-1&quot;&gt;&lt;a href=&quot;#思路-1&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;栈是先进后出，后进先出。如果把元素放进队列里，那么先出的就是队列里的最后一个元素。&lt;br&gt;入栈操作直接用入队列操作的话，那么出栈操作就先把队列里除开最后元素的所有元素放到&lt;br&gt;另一个队列，然后把当前元素出队，最后置换一下当前队列和后备队列的指针。&lt;/p&gt;
&lt;h3 id=&quot;代码-1&quot;&gt;&lt;a href=&quot;#代码-1&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.LinkedList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Queue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;QueueToStack&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Queue&amp;lt;E&amp;gt; q, backup;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;QueueToStack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		q = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		backup = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(E e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; q.offer(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;title&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(q.size()&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			backup.offer(q.poll());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Queue&amp;lt;E&amp;gt; tmp = q;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		q = backup;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		backup = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; backup.poll();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; q.isEmpty() &amp;amp;&amp;amp; backup.isEmpty();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; q.size() + backup.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 既生瑜，何生亮？《三国演义》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x01-用栈模拟队列&quot;&gt;&lt;a href=&quot;#0x01-用栈模拟队列&quot; class=&quot;headerlink&quot; title=&quot;0x01 用栈模拟队列&quot;&gt;&lt;/a&gt;0x01 用栈模拟队列&lt;/h2&gt;&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;队列是先进先出。如果把元素放进栈里，那么先出的是栈底元素。入队列直接用入栈1操作的话，&lt;br&gt;出队列就先把栈1内除开栈底的元素弹到另一个栈2，然后弹出栈1底元素。这是因为栈2原本没有&lt;br&gt;元素，如果栈2有元素，此时的元素的出队顺序和栈2弹出元素的顺序一致，栈2弹出元素即可，&lt;br&gt;直到栈2没有元素，此时又需要重复栈1弹到栈2的操作。&lt;/p&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;
    
    </summary>
    
      <category term="技术博客" scheme="http://joshshaw.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="数据结构" scheme="http://joshshaw.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="队列" scheme="http://joshshaw.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
      <category term="栈" scheme="http://joshshaw.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>JPEG图像部分加密</title>
    <link href="http://joshshaw.github.io/2016/03/24/JPEG%E5%9B%BE%E5%83%8F%E9%83%A8%E5%88%86%E5%8A%A0%E5%AF%86/"/>
    <id>http://joshshaw.github.io/2016/03/24/JPEG图像部分加密/</id>
    <published>2016-03-24T06:28:20.000Z</published>
    <updated>2016-03-30T11:01:17.991Z</updated>
    
    <content type="html">&lt;h2 id=&quot;JPEG编码流程&quot;&gt;&lt;a href=&quot;#JPEG编码流程&quot; class=&quot;headerlink&quot; title=&quot;JPEG编码流程&quot;&gt;&lt;/a&gt;JPEG编码流程&lt;/h2&gt;&lt;img src=&quot;/2016/03/24/JPEG图像部分加密/jpeg.png&quot; alt=&quot;jpeg.png&quot; title=&quot;&quot;&gt;
&lt;h2 id=&quot;各种加密操作效果以及破解&quot;&gt;&lt;a href=&quot;#各种加密操作效果以及破解&quot; class=&quot;headerlink&quot; title=&quot;各种加密操作效果以及破解&quot;&gt;&lt;/a&gt;各种加密操作效果以及破解&lt;/h2&gt;&lt;img src=&quot;/2016/03/24/JPEG图像部分加密/pic1.jpg&quot; alt=&quot;pic1.jpg&quot; title=&quot;&quot;&gt;
&lt;img src=&quot;/2016/03/24/JPEG图像部分加密/pic2.jpg&quot; alt=&quot;pic2.jpg&quot; title=&quot;&quot;&gt;
&lt;ul&gt;
&lt;li&gt;图（1, 1）Lena原图&lt;/li&gt;
&lt;li&gt;图（1, 2）= 图（1, 1）符号位加密&lt;/li&gt;
&lt;li&gt;图（1, 3）= 图（1, 2）DCT取正（包括DC和AC）&lt;/li&gt;
&lt;li&gt;图（2, 2）= 图（1, 1）AC置乱，符号位加密&lt;/li&gt;
&lt;li&gt;图（2, 3）= 图（2, 2）零块二值化&lt;/li&gt;
&lt;li&gt;图（3, 1）= Tiffany原图&lt;/li&gt;
&lt;li&gt;图（3, 2）= 图（3, 1）AC置乱，符号位加密&lt;/li&gt;
&lt;li&gt;图（3, 3）= 图（3, 2）零块二值化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;MCU置换-AC置乱效果&quot;&gt;&lt;a href=&quot;#MCU置换-AC置乱效果&quot; class=&quot;headerlink&quot; title=&quot;MCU置换+AC置乱效果&quot;&gt;&lt;/a&gt;MCU置换+AC置乱效果&lt;/h2&gt;&lt;img src=&quot;/2016/03/24/JPEG图像部分加密/pic3.jpg&quot; alt=&quot;pic3.jpg&quot; title=&quot;&quot;&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JPEG编码流程&quot;&gt;&lt;a href=&quot;#JPEG编码流程&quot; class=&quot;headerlink&quot; title=&quot;JPEG编码流程&quot;&gt;&lt;/a&gt;JPEG编码流程&lt;/h2&gt;&lt;img src=&quot;/2016/03/24/JPEG图像部分加密/jpeg.png&quot; alt=&quot;j
    
    </summary>
    
      <category term="技术博客" scheme="http://joshshaw.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="部分加密" scheme="http://joshshaw.github.io/tags/%E9%83%A8%E5%88%86%E5%8A%A0%E5%AF%86/"/>
    
      <category term="JPEG" scheme="http://joshshaw.github.io/tags/JPEG/"/>
    
  </entry>
  
  <entry>
    <title>关于公正和公信</title>
    <link href="http://joshshaw.github.io/2016/03/20/%E5%85%B3%E4%BA%8E%E5%85%AC%E6%AD%A3%E5%92%8C%E5%85%AC%E4%BF%A1/"/>
    <id>http://joshshaw.github.io/2016/03/20/关于公正和公信/</id>
    <published>2016-03-20T02:58:51.000Z</published>
    <updated>2016-04-28T07:15:27.757Z</updated>
    
    <content type="html">&lt;p&gt;看完《八恶人》，其中有两个细节我想强调一下。&lt;br&gt;&lt;img src=&quot;/2016/03/20/关于公正和公信/poster.jpg&quot; alt=&quot;poster.jpg&quot; title=&quot;&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;公正&quot;&gt;&lt;a href=&quot;#公正&quot; class=&quot;headerlink&quot; title=&quot;公正&quot;&gt;&lt;/a&gt;公正&lt;/h2&gt;&lt;p&gt;因为谋杀被通缉，一种方法是奖金猎人把疑犯抓回接受审判，判定有罪后，由绞刑者实施绞刑，这被称为文明社会的正义。另一种方法是被杀者的亲人好友，直接把疑犯就地解决，这被称为边境裁决。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;那最终这两种方法到底有什么区别？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;真正的区别在于，对于绞刑者的我来说&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我才不会在乎你做了什么，当我绞死你的时候&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我不会暗爽，这只是我的工作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我在红石镇绞死你，然后我搬到别的镇子上，我又去绞死别人&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;那个拉动操纵杆绞死你的男人&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;他是个公正的人&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;那份公正才是正义的精髓正义若是不公平地传递下去的话&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;是会危害正义本身的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__绞刑者__&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;/2016/03/20/关于公正和公信/justice2.jpg&quot; alt=&quot;justice2.jpg&quot; title=&quot;&quot;&gt;
&lt;h2 id=&quot;公信&quot;&gt;&lt;a href=&quot;#公信&quot; class=&quot;headerlink&quot; title=&quot;公信&quot;&gt;&lt;/a&gt;公信&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;然后他又开始求我了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;只是这次不是为了回家&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;他知道他再也回不去了，而且他也不求我放他一命&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;因为他知道他已是将死之人&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;他只是想要一张毛毯&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我没给你儿子毛毯&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;尽管他照我说的做了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;还是没给他毛毯&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;那个毛毯不过是心碎的骗子给的一个承诺&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;就像联邦军给那些你所不承认的黑人骑兵们发的统一制服一样&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__黑人少校__&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;/2016/03/20/关于公正和公信/accountability.jpg&quot; alt=&quot;accountability.jpg&quot; title=&quot;&quot;&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;看完《八恶人》，其中有两个细节我想强调一下。&lt;br&gt;&lt;img src=&quot;/2016/03/20/关于公正和公信/poster.jpg&quot; alt=&quot;poster.jpg&quot; title=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="一派胡言" scheme="http://joshshaw.github.io/categories/%E4%B8%80%E6%B4%BE%E8%83%A1%E8%A8%80/"/>
    
    
      <category term="公正" scheme="http://joshshaw.github.io/tags/%E5%85%AC%E6%AD%A3/"/>
    
      <category term="公信" scheme="http://joshshaw.github.io/tags/%E5%85%AC%E4%BF%A1/"/>
    
      <category term="文" scheme="http://joshshaw.github.io/tags/%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>一个经典的递归题目</title>
    <link href="http://joshshaw.github.io/2016/03/19/%E4%B8%80%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E9%80%92%E5%BD%92%E9%A2%98%E7%9B%AE/"/>
    <id>http://joshshaw.github.io/2016/03/19/一个经典的递归题目/</id>
    <published>2016-03-19T06:31:06.000Z</published>
    <updated>2016-03-30T11:01:27.314Z</updated>
    
    <content type="html">&lt;h2 id=&quot;0x00-题目&quot;&gt;&lt;a href=&quot;#0x00-题目&quot; class=&quot;headerlink&quot; title=&quot;0x00 题目&quot;&gt;&lt;/a&gt;0x00 题目&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给出一颗二叉树的前序遍历（ABDEHCFIGJK）和中序遍历（DBHEAFICJGK），重构该二叉树。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x01-思路&quot;&gt;&lt;a href=&quot;#0x01-思路&quot; class=&quot;headerlink&quot; title=&quot;0x01 思路&quot;&gt;&lt;/a&gt;0x01 思路&lt;/h2&gt;&lt;p&gt;经典的题目，考察把大问题分解成小问题的能力，也就是分而治之。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先我们知道二叉树的前序遍历的第一个节点就是根节点，上面的题目例子可以知道根节点是&lt;strong&gt;A&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;再看中序遍历，找到根节点&lt;strong&gt;A&lt;/strong&gt;，那么&lt;strong&gt;A&lt;/strong&gt;的前面是&lt;strong&gt;左子树&lt;/strong&gt;，节点数为4，右边是&lt;strong&gt;右子树&lt;/strong&gt;，节点数为6。&lt;/li&gt;
&lt;li&gt;回到前序遍历，根节点&lt;strong&gt;A&lt;/strong&gt;后面的4个结点就是&lt;strong&gt;左子树&lt;/strong&gt;，剩下的为&lt;strong&gt;右子树&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;到了这里，我们可以把问题分解成求解左右子树的重构问题，其中左子树的前序遍历为（BDEH），中序遍历为（DBHE）；&lt;br&gt;右子树的前序遍历为（CFIGJK），中序遍历为（FICJGK）。&lt;/li&gt;
&lt;li&gt;重复上述。同时记得判断和递归的边界。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;0x02-Java代码&quot;&gt;&lt;a href=&quot;#0x02-Java代码&quot; class=&quot;headerlink&quot; title=&quot;0x02 Java代码&quot;&gt;&lt;/a&gt;0x02 Java代码&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TreeNode&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TreeNode left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TreeNode right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TreeNode(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x) &amp;#123; val = x; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; TreeNode &lt;span class=&quot;title&quot;&gt;buildTree&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] preorder, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] inorder)&lt;/span&gt; &lt;/span&gt;&amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; buildTree0(preorder, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, preorder.length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, inorder, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, inorder.length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; TreeNode &lt;span class=&quot;title&quot;&gt;buildTree0&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] preorder, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pref, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; prel, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] inorder, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; inf, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; inl)&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;comment&quot;&gt;// New SubRoot&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; subr = preorder[prel];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TreeNode subRoot = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TreeNode(subr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Find LeftTree &amp;amp; RightTree&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index = getinorderRootIndex(subr, inorder, inf, inl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; leftTreeSize = index - inf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(leftTreeSize!=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	subRoot.left = buildTree0(preorder, pref, pref+leftTreeSize-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, inorder, inf, inf+leftTreeSize-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(rightTreeSize!=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	subRoot.right = buildTree0(preorder, pref+leftTreeSize, prel-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, inorder, inf+leftTreeSize+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, inl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; subRoot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getinorderRootIndex&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; subr, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] inorder, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; inf, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; inl)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=inf; i&amp;lt;=inl; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(subr==inorder[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;0x03-小结&quot;&gt;&lt;a href=&quot;#0x03-小结&quot; class=&quot;headerlink&quot; title=&quot;0x03 小结&quot;&gt;&lt;/a&gt;0x03 小结&lt;/h2&gt;&lt;p&gt;此题考查算法的分治法，其基本思想是可把问题分为独立求解的子问题，子问题与原问题类似，子问题的解合并得到原问题的解。&lt;br&gt;基本步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分解&lt;/li&gt;
&lt;li&gt;解决&lt;/li&gt;
&lt;li&gt;合并&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关键点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子问题独立&lt;/li&gt;
&lt;li&gt;子问题容易求解&lt;/li&gt;
&lt;li&gt;子问题与原问题类同&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-题目&quot;&gt;&lt;a href=&quot;#0x00-题目&quot; class=&quot;headerlink&quot; title=&quot;0x00 题目&quot;&gt;&lt;/a&gt;0x00 题目&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给出一颗二叉树的前序遍历（ABDEHCFIGJK）和中序遍历（DBHEAFICJGK），重构该二叉树。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x01-思路&quot;&gt;&lt;a href=&quot;#0x01-思路&quot; class=&quot;headerlink&quot; title=&quot;0x01 思路&quot;&gt;&lt;/a&gt;0x01 思路&lt;/h2&gt;&lt;p&gt;经典的题目，考察把大问题分解成小问题的能力，也就是分而治之。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先我们知道二叉树的前序遍历的第一个节点就是根节点，上面的题目例子可以知道根节点是&lt;strong&gt;A&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;再看中序遍历，找到根节点&lt;strong&gt;A&lt;/strong&gt;，那么&lt;strong&gt;A&lt;/strong&gt;的前面是&lt;strong&gt;左子树&lt;/strong&gt;，节点数为4，右边是&lt;strong&gt;右子树&lt;/strong&gt;，节点数为6。&lt;/li&gt;
&lt;li&gt;回到前序遍历，根节点&lt;strong&gt;A&lt;/strong&gt;后面的4个结点就是&lt;strong&gt;左子树&lt;/strong&gt;，剩下的为&lt;strong&gt;右子树&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;到了这里，我们可以把问题分解成求解左右子树的重构问题，其中左子树的前序遍历为（BDEH），中序遍历为（DBHE）；&lt;br&gt;右子树的前序遍历为（CFIGJK），中序遍历为（FICJGK）。&lt;/li&gt;
&lt;li&gt;重复上述。同时记得判断和递归的边界。
    
    </summary>
    
      <category term="技术博客" scheme="http://joshshaw.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Leetcode" scheme="http://joshshaw.github.io/tags/Leetcode/"/>
    
      <category term="递归" scheme="http://joshshaw.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="二叉树" scheme="http://joshshaw.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="分而治之" scheme="http://joshshaw.github.io/tags/%E5%88%86%E8%80%8C%E6%B2%BB%E4%B9%8B/"/>
    
  </entry>
  
  <entry>
    <title>My Profile</title>
    <link href="http://joshshaw.github.io/2016/03/18/My-Profile/"/>
    <id>http://joshshaw.github.io/2016/03/18/My-Profile/</id>
    <published>2016-03-18T10:58:53.000Z</published>
    <updated>2016-03-20T06:02:22.116Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;/2016/03/18/我的简历/&quot;&gt;Chinese version&lt;/a&gt; is here.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Basic-Information&quot;&gt;&lt;a href=&quot;#Basic-Information&quot; class=&quot;headerlink&quot; title=&quot;Basic Information&quot;&gt;&lt;/a&gt;Basic Information&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Changzhou Xiao (Joshua Shaw) / Male / 1992&lt;/li&gt;
&lt;li&gt;Zhang Jiang, Guangdong Province, PRC&lt;/li&gt;
&lt;li&gt;Cell Phone: (+86)13570319480&lt;/li&gt;
&lt;li&gt;Q Q: 455532734&lt;/li&gt;
&lt;li&gt;E-mail: joshuashaw@foxmail.com&lt;/li&gt;
&lt;li&gt;OSChina BLOG：&lt;a href=&quot;http://my.oschina.net/joshuashaw&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://my.oschina.net/joshuashaw&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Educational-Background&quot;&gt;&lt;a href=&quot;#Educational-Background&quot; class=&quot;headerlink&quot; title=&quot;Educational Background&quot;&gt;&lt;/a&gt;Educational Background&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Period&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Degree&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;University&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;College&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Profession&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;2015–&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Master&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Sun Yat-sen University(SYSU)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;School of Data and Computer Science&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Computer Technology&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;2011–2015&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Undergraduate&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;South China University of Technology(SCUT)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;School of Computer Science &amp;amp; Engineering&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Information Security&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Project-Experience&quot;&gt;&lt;a href=&quot;#Project-Experience&quot; class=&quot;headerlink&quot; title=&quot;Project Experience&quot;&gt;&lt;/a&gt;Project Experience&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;APP Lock for Straight A Student&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;A mobile application for Android terminal&lt;/li&gt;
&lt;li&gt;Aims to weak-minded students&lt;/li&gt;
&lt;li&gt;Offers timing restrictions on access function&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JPEG Image Encryption Framework&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Provides a set of JPEG image encryption policy&lt;/li&gt;
&lt;li&gt;Implements JPEG encoder with Java&lt;/li&gt;
&lt;li&gt;Not only available default policy but also customized policy&lt;/li&gt;
&lt;li&gt;No external dependencies&lt;/li&gt;
&lt;li&gt;Little volume change to encrypted image&lt;/li&gt;
&lt;li&gt;Acceptable encryption speed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Video Game Live Streaming System&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Offers a whole solution for live streaming, including Web and Android terminal&lt;/li&gt;
&lt;li&gt;Based on Nginx RTMP server&lt;/li&gt;
&lt;li&gt;Offers a simple load balancing&lt;/li&gt;
&lt;li&gt;Access Gaming Anywhere&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Work-Experience&quot;&gt;&lt;a href=&quot;#Work-Experience&quot; class=&quot;headerlink&quot; title=&quot;Work Experience&quot;&gt;&lt;/a&gt;Work Experience&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Period&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Unit&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Position&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2013.9–2015.7&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Class of Information Security&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Class Monitor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2014.7–2014.8&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;China Mobile Guangdong Branch&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Information Security Management&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Awards-amp-Honor&quot;&gt;&lt;a href=&quot;#Awards-amp-Honor&quot; class=&quot;headerlink&quot; title=&quot;Awards &amp;amp; Honor&quot;&gt;&lt;/a&gt;Awards &amp;amp; Honor&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Period&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Unit&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Award&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2011–2012&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;South China University of Technology&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Second Scholarship&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2012–2013&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;South China University of Technology&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Third Scholarship&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2013–2014&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;South China University of Technology&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Nation scholarship, Outstanding cadres&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2014&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;China Mobile Guangdong Branch&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Excellent intern&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2016/03/18/我的简历/&quot;&gt;Chinese version&lt;/a&gt; is here.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Basic-Information&quot;&gt;&lt;a href=&quot;#Basic-Information&quot; class=&quot;headerlink&quot; title=&quot;Basic Information&quot;&gt;&lt;/a&gt;Basic Information&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Changzhou Xiao (Joshua Shaw) / Male / 1992&lt;/li&gt;
&lt;li&gt;Zhang Jiang, Guangdong Province, PRC&lt;/li&gt;
&lt;li&gt;Cell Phone: (+86)13570319480&lt;/li&gt;
&lt;li&gt;Q Q: 455532734&lt;/li&gt;
&lt;li&gt;E-mail: joshuashaw@foxmail.com&lt;/li&gt;
&lt;li&gt;OSChina BLOG：&lt;a href=&quot;http://my.oschina.net/joshuashaw&quot;&gt;http://my.oschina.net/joshuashaw&lt;/a&gt;
    
    </summary>
    
      <category term="March" scheme="http://joshshaw.github.io/categories/March/"/>
    
    
      <category term="profile" scheme="http://joshshaw.github.io/tags/profile/"/>
    
      <category term="简历" scheme="http://joshshaw.github.io/tags/%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>我的简历</title>
    <link href="http://joshshaw.github.io/2016/03/18/%E6%88%91%E7%9A%84%E7%AE%80%E5%8E%86/"/>
    <id>http://joshshaw.github.io/2016/03/18/我的简历/</id>
    <published>2016-03-18T10:55:43.000Z</published>
    <updated>2016-03-20T05:57:15.168Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;/2016/03/18/My-Profile/&quot;&gt;英文版本&lt;/a&gt;在此。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;基本信息&quot;&gt;&lt;a href=&quot;#基本信息&quot; class=&quot;headerlink&quot; title=&quot;基本信息&quot;&gt;&lt;/a&gt;基本信息&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;肖长洲 / 男 / 1992&lt;/li&gt;
&lt;li&gt;广东湛江&lt;/li&gt;
&lt;li&gt;电话：13570319480&lt;/li&gt;
&lt;li&gt;Q Q：455532734&lt;/li&gt;
&lt;li&gt;邮箱：joshuashaw@foxmail.com&lt;/li&gt;
&lt;li&gt;BLOG：&lt;a href=&quot;http://my.oschina.net/joshuashaw&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://my.oschina.net/joshuashaw&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;教育背景&quot;&gt;&lt;a href=&quot;#教育背景&quot; class=&quot;headerlink&quot; title=&quot;教育背景&quot;&gt;&lt;/a&gt;教育背景&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;时间&lt;/th&gt;
&lt;th&gt;学历&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;学校&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;学院&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;专业&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;2015–&lt;/td&gt;
&lt;td&gt;硕士&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;中山大学&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;数据科学与计算机学院&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;计算机技术&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;2011–2015&lt;/td&gt;
&lt;td&gt;本科&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;华南理工大学&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;计算机科学与工程学院&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;信息安全专业&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;项目经验&quot;&gt;&lt;a href=&quot;#项目经验&quot; class=&quot;headerlink&quot; title=&quot;项目经验&quot;&gt;&lt;/a&gt;项目经验&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;学霸应用锁&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;安卓端的手机应用&lt;/li&gt;
&lt;li&gt;针对意志不坚定的学生&lt;/li&gt;
&lt;li&gt;提供手机应用定时限制使用的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JPEG图像加密库&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;提供一组JPEG图像加密的策略&lt;/li&gt;
&lt;li&gt;完成了JPEG图像编码器的JAVA实现&lt;/li&gt;
&lt;li&gt;可使用默认实现的加密策略或者自定义实现加密策略&lt;/li&gt;
&lt;li&gt;无外部依赖&lt;/li&gt;
&lt;li&gt;加密图像体积变化小&lt;/li&gt;
&lt;li&gt;加密速度较快&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;云游戏直播系统&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;提供游戏直播的一整套解决方案，包括网页端和移动端&lt;/li&gt;
&lt;li&gt;基于Nginx的RTMP服务器&lt;/li&gt;
&lt;li&gt;提供简单的负载均衡&lt;/li&gt;
&lt;li&gt;接入云游戏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;工作经历&quot;&gt;&lt;a href=&quot;#工作经历&quot; class=&quot;headerlink&quot; title=&quot;工作经历&quot;&gt;&lt;/a&gt;工作经历&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;时间&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;单位&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;职务&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2013.9–2015.7&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;华南理工大学信息安全班&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;班长&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2014.7–2014.8&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;中国移动广东有限公司&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;信息安全管理&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;奖项荣誉&quot;&gt;&lt;a href=&quot;#奖项荣誉&quot; class=&quot;headerlink&quot; title=&quot;奖项荣誉&quot;&gt;&lt;/a&gt;奖项荣誉&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;时间&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;单位&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;奖项&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2011–2012&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;华南理工大学&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;学校二等奖学金&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2012–2013&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;华南理工大学&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;学校三等奖学金&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2013–2014&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;华南理工大学&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;国家励志奖学金，优秀干部&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2014&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;中国移动广东有限公司&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;优秀实习生&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2016/03/18/My-Profile/&quot;&gt;英文版本&lt;/a&gt;在此。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;基本信息&quot;&gt;&lt;a href=&quot;#基本信息&quot; class=&quot;headerlink&quot; title=&quot;基本信息&quot;&gt;&lt;/a&gt;基本信息&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;肖长洲 / 男 / 1992&lt;/li&gt;
&lt;li&gt;广东湛江&lt;/li&gt;
&lt;li&gt;电话：13570319480&lt;/li&gt;
&lt;li&gt;Q Q：455532734&lt;/li&gt;
&lt;li&gt;邮箱：joshuashaw@foxmail.com&lt;/li&gt;
&lt;li&gt;BLOG：&lt;a href=&quot;http://my.oschina.net/joshuashaw&quot;&gt;http://my.oschina.net/joshuashaw&lt;/a&gt;
    
    </summary>
    
      <category term="March" scheme="http://joshshaw.github.io/categories/March/"/>
    
    
      <category term="profile" scheme="http://joshshaw.github.io/tags/profile/"/>
    
      <category term="简历" scheme="http://joshshaw.github.io/tags/%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
</feed>
